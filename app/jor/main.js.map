{"version":3,"sources":["webpack:///./dist/jor-angular/fesm5/jor-angular.js","webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/custom.reuse.strategy.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0B;AACkB;AACqB;AACyB;AAC3C;AACkC;AACS;;AAE1F;AACA;AACA,cAAc,uEAAuE;AACrcAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,+BAA+B,cAAc;AAC7C;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,+BAA+B;AAC/B,kDAAkD,iEAAiE,EAAE;AACrH;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,yDAAyD;AACnE,UAAU,sDAAsD;AAChE,UAAU;AACV;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA,0DAA0D,mEAAmE,EAAE;AAC/H;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA,uBAAuB,EAAE;AACzB;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,2BAA2B,EAAE;AAC7B,yCAAyC;AACzC,0DAA0D,oEAAoE,EAAE;AAChI;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qCAAqC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,cAAc;AACd,aAAa;AACb,YAAY,uGAAuG;AACnH,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA,mEAAmE,iGAAiG,EAAE;AACtK,0CAA0C,uFAAuF;AACjI;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA,iBAAiB;AACjB;AACA;AACA,kDAAkD,WAAW;AAC7D,yDAAyD,sEAAgB,EAAE,8CAA8C,8BAA8B,EAAE,8CAA8C;AACvM;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;AACA,WAAW,EAAE;AACb;AACA,iBAAiB,gEAAW,EAAE,qCAAqC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,0BAA0B,MAAM,kEAAkE,EAAE,EAAE;AACtG,aAAa;AACb,0BAA0B,MAAM;AAChC,mGAAmG,EAAE;AACrG;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,+EAA+E,iEAAU;AACzF;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,2FAA2F,iEAAU;AACrG;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,wFAAwF,iEAAU;AAClG;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,+FAA+F,iEAAU;AACzG;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,gGAAgG,iEAAU;AAC1G;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,4FAA4F,iEAAU;AACtG;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,iGAAiG,iEAAU;AAC3G;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,6FAA6F,iEAAU;AACvG;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,4FAA4F,iEAAU;AACtG;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mGAAmG,iEAAU;AAC7G;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oGAAoG,iEAAU;AAC9G;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mGAAmG,iEAAU;AAC7G;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,0GAA0G,iEAAU;AACpH;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,iGAAiG,iEAAU;AAC3G;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,kGAAkG,iEAAU;AAC5G;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,qGAAqG,iEAAU;AAC/G;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,qGAAqG,iEAAU;AAC/G;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,qGAAqG,iEAAU;AAC/G;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,0GAA0G,iEAAU;AACpH;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,6GAA6G,iEAAU;AACvH;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,6FAA6F,iEAAU;AACvG;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,qFAAqF,iEAAU;AAC/F;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,0FAA0F,iEAAU;AACpG;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,6FAA6F,iEAAU;AACvG;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,mCAAmC,yBAAyB;AAC5D;AACA;AACA,iCAAiC;AACjC;AACA,gFAAgF,8DAAW;AAC3F;AACA;AACA,wEAAwE,8DAAW;AACnF;AACA;AACA,mBAAmB,+CAAE,aAAa,EAAE;AACpC;AACA;AACA;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA,iBAAiB;AACjB;AACA;AACA,gDAAgD;AAChD,SAAS,OAAO,+DAAU,EAAE;AAC5B,SAAS,OAAO,iEAAc;AAC9B,MAAM;AACN,uDAAuD,sEAAgB,EAAE,4CAA4C,0BAA0B,4DAAM,CAAC,+DAAU,GAAG,4DAAM,CAAC,iEAAc,GAAG,EAAE,4CAA4C;AACzO;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,uDAAuD,EAAE;AAC9E;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,qDAAqD;AACrD;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD,oFAAoF,kCAAkC,EAAE;AACxH,gDAAgD,8CAA8C,EAAE;AAChG;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,kFAAkF,gCAAgC,EAAE;AACpH,8CAA8C,0CAA0C,EAAE;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,0CAA0C,iDAAiD;AAC3F,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,2CAA2C,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,gDAAgD,oEAAoE;AACpH;AACA;AACA,gDAAgD,oEAAoE;AACpH;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,+CAA+C,EAAE;AACjD,oEAAoE,wCAAwC,EAAE;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,4BAA4B;AAC5B,uDAAuD,4DAA4D,EAAE;AACrH;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,+CAA+C,uCAAuC,EAAE;AACxF;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,wDAAS;AACxD,2BAA2B,EAAE;AAC7B,gDAAgD,EAAE;AAClD,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,8HAA8H,+BAA+B,gBAAgB,kCAAkC,qQAAqQ,6BAA6B,IAAI,iBAAiB,yIAAyI,slBA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","file":"main.js","sourcesContent":["import { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { MessageService, messageType } from 'ui-message-angular';\nimport { Injectable, Component, NgModule, defineInjectable, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClient, HttpHeaders, HttpClientModule } from '@angular/common/http';\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar Entity = /** @class */ (function () {\n    function Entity() {\n    }\n    return Entity;\n}());\nvar Relationship = /** @class */ (function () {\n    function Relationship() {\n    }\n    return Relationship;\n}());\nvar RelationshipInstance = /** @class */ (function () {\n    function RelationshipInstance() {\n    }\n    return RelationshipInstance;\n}());\nvar PartnerInstance = /** @class */ (function () {\n    function PartnerInstance() {\n    }\n    return PartnerInstance;\n}());\nvar PartnerRole = /** @class */ (function () {\n    function PartnerRole() {\n    }\n    return PartnerRole;\n}());\nvar EntityMeta = /** @class */ (function () {\n    function EntityMeta() {\n    }\n    return EntityMeta;\n}());\nvar Attribute = /** @class */ (function () {\n    function Attribute() {\n    }\n    return Attribute;\n}());\nvar Role = /** @class */ (function () {\n    function Role() {\n    }\n    return Role;\n}());\nvar RoleRelation = /** @class */ (function () {\n    function RoleRelation() {\n    }\n    return RoleRelation;\n}());\nvar RelationshipMeta = /** @class */ (function () {\n    function RelationshipMeta() {\n    }\n    return RelationshipMeta;\n}());\nvar Involve = /** @class */ (function () {\n    function Involve() {\n    }\n    return Involve;\n}());\nvar RelationMeta = /** @class */ (function () {\n    function RelationMeta() {\n    }\n    return RelationMeta;\n}());\nvar Association = /** @class */ (function () {\n    function Association() {\n    }\n    return Association;\n}());\nvar FieldsMappingPair = /** @class */ (function () {\n    function FieldsMappingPair() {\n    }\n    return FieldsMappingPair;\n}());\nvar EntityRelation = /** @class */ (function () {\n    function EntityRelation() {\n    }\n    return EntityRelation;\n}());\nvar Selection = /** @class */ (function () {\n    function Selection() {\n    }\n    return Selection;\n}());\nvar Projection = /** @class */ (function () {\n    function Projection() {\n    }\n    return Projection;\n}());\nvar QueryObject = /** @class */ (function () {\n    function QueryObject() {\n    }\n    return QueryObject;\n}());\nvar Sort = /** @class */ (function () {\n    function Sort() {\n    }\n    return Sort;\n}());\nvar EntityType = /** @class */ (function () {\n    function EntityType() {\n    }\n    return EntityType;\n}());\nvar Relation = /** @class */ (function () {\n    function Relation() {\n    }\n    return Relation;\n}());\nvar RelationshipH = /** @class */ (function () {\n    function RelationshipH() {\n    }\n    return RelationshipH;\n}());\nvar RoleH = /** @class */ (function () {\n    function RoleH() {\n    }\n    return RoleH;\n}());\nvar RoleMeta = /** @class */ (function () {\n    function RoleMeta() {\n    }\n    return RoleMeta;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar UiMapperService = /** @class */ (function () {\n    function UiMapperService() {\n    }\n    /**\n     * Map a FormGroup to a JOR relation(with cardinality [0..1] and [1..1]) for adding or updating.\n     * @param formGroup: It must be a flat Angular FormGroup, which means no deep structure.\n     * @param keys: Business primary keys to identify one row in the relation(DB table).\n     * For example: Given {USER_ID: 'DH001'}, it means the relation has the primary key 'USER_ID'.\n     * And it must be filled with a fix value 'DH001'.\n     * However, if the value of the key can be derived from the formGroup, then assign null value to it.\n     * For example: Given {EMAIL: null}, the value of key EMAIL will be derived from formGroup.value['EMAIL'].\n     * @param isNew: Determine whether to update or add the value.\n     *\n     * The return is an object like:\n     * {\n     *     action: 'update', USER_ID: 'DH001', MIDDLE_NAME: \"xxxxxx\"\n     * }\n     */\n    /**\n     * Map a FormGroup to a JOR relation(with cardinality [0..1] and [1..1]) for adding or updating.\n     * @param {?} formGroup\n     * @param {?} keys\n     * @param {?=} isNew\n     * @return {?}\n     */\n    UiMapperService.prototype.composeChangedRelation = /**\n     * Map a FormGroup to a JOR relation(with cardinality [0..1] and [1..1]) for adding or updating.\n     * @param {?} formGroup\n     * @param {?} keys\n     * @param {?=} isNew\n     * @return {?}\n     */\n    function (formGroup, keys, isNew) {\n        if (isNew === void 0) { isNew = true; }\n        if (!formGroup.dirty || !keys || Object.keys(keys).length === 0) {\n            return {};\n        }\n        /** @type {?} */\n        var changedRelation = { action: isNew ? 'add' : 'update' };\n        Object.keys(keys).forEach(function (key) { return changedRelation[key] = keys[key] || formGroup.value[key]; });\n        Object.keys(formGroup.controls).forEach(function (key) {\n            /** @type {?} */\n            var control = formGroup.get(key);\n            if (control.dirty) {\n                changedRelation[key] = control.value;\n            }\n        });\n        return changedRelation;\n    };\n    /**\n     * Map a FormArray to JOR relation(with cardinality [0..n] or [1..n]) for adding, updating, or deletion.\n     * @param formArray: It must be a flat Angular FormArray, which means no deep structure.\n     * @param originalArray: To determine whether an item is for adding, or for updating, or for deletion.\n     * the original array, which shares the same structure with the formArray, is used for comparison.\n     * Tips: You can get the originalArray by calling *FormArray.getRawValue()* right after\n     * the FormArray is constructed from the backend data, usually, in ngOnInit().\n     * @param keys: Business primary keys to identify one row in the formArray and originalArray.\n     * For example: Given {EMAIL: null}, it will use the attribute EMAIL to compare if the same item exists or not.\n     * First it iterates the formArray to whether check EMAIL exists in the originalArray,\n     * if exists, use action 'update', otherwise, use action 'add'.\n     * Then it iterates the originalArray to check EMAIL exists in formArray,\n     * if not exists, then the action is set to 'delete'.\n     *\n     * The return is an array like:\n     * [\n     *   {action: \"update\", EMAIL: \"dh003@hotmail.com\", PRIMARY: 1},\n     *   {action: \"add\", EMAIL: \"dh003@gmail.com\", TYPE: \"work\"},\n     *   {action: \"delete\", EMAIL: \"dh003@darkhouse.com\"}\n     * ]\n     */\n    /**\n     * Map a FormArray to JOR relation(with cardinality [0..n] or [1..n]) for adding, updating, or deletion.\n     * @param {?} formArray\n     * @param {?} originalArray\n     * @param {?} keys\n     * @return {?}\n     */\n    UiMapperService.prototype.composeChangedRelationArray = /**\n     * Map a FormArray to JOR relation(with cardinality [0..n] or [1..n]) for adding, updating, or deletion.\n     * @param {?} formArray\n     * @param {?} originalArray\n     * @param {?} keys\n     * @return {?}\n     */\n    function (formArray, originalArray, keys) {\n        if (!formArray.dirty || !keys || Object.keys(keys).length === 0) {\n            return [];\n        }\n        if (!originalArray) {\n            originalArray = [];\n        }\n        /** @type {?} */\n        var changedRelationArray = [];\n        formArray.controls.forEach(function (formGroup) {\n            if (formGroup.dirty) {\n                /** @type {?} */\n                var changedRelation_1 = {};\n                changedRelationArray.push(changedRelation_1);\n                /** @type {?} */\n                var index = originalArray.findIndex(function (element) {\n                    /** @type {?} */\n                    var found = true;\n                    Object.keys(keys).forEach(function (key) {\n                        if (keys[key]) {\n                            return;\n                        }\n                        found = found && (element[key] === formGroup.value[key]);\n                    });\n                    return found;\n                });\n                changedRelation_1['action'] = index === -1 ? 'add' : 'update';\n                Object.keys(keys).forEach(function (key) { return changedRelation_1[key] = keys[key] || formGroup.value[key]; });\n                Object.keys(formGroup['controls']).forEach(function (key) {\n                    /** @type {?} */\n                    var control = formGroup.get(key);\n                    if (control.dirty) {\n                        changedRelation_1[key] = control.value;\n                    }\n                });\n            }\n        });\n        originalArray.forEach(function (originalRelation) {\n            /** @type {?} */\n            var index = formArray.controls.findIndex(function (element) {\n                /** @type {?} */\n                var found = true;\n                Object.keys(keys).forEach(function (key) {\n                    if (keys[key]) {\n                        return;\n                    }\n                    found = found && (element.value[key] === originalRelation[key]);\n                });\n                return found;\n            });\n            if (index === -1) {\n                /** @type {?} */\n                var deletedRelation_1 = { action: 'delete' };\n                Object.keys(keys).forEach(function (key) { return deletedRelation_1[key] = keys[key] || originalRelation[key]; });\n                changedRelationArray.push(deletedRelation_1);\n            }\n        });\n        return changedRelationArray;\n    };\n    /**\n     * Map a FormArray to JOR relationships for adding, updating, or deletion.\n     * @param relationshipID: Relationship ID defined in JOR. For example: 'rs_marriage'\n     * @param partnerRoles: Partner roles involved in the relationship.\n     * For example: Given [{ENTITY_ID: 'person', ROLE_ID: 'wife'}], it means the partner is a 'person' with role 'wife'.\n     * In most cases, a relationship only involves 2 roles, like husband and wife.\n     * However, in certain case, there could be more than two. So the partner role is provided as an array.\n     * @param formArray: First, it must be a flat Angular FormArray, which means no deep structure.\n     * Second, it must contain fields: RELATIONSHIP_INSTANCE_GUID and <partner_role_name>_INSTANCE_GUID.\n     * @param originalArray: To determine whether an item is for adding, or for updating, or for deletion.\n     * the original array, which shares the same structure with the formArray, is used for comparison.\n     * Tips: You can get the originalArray by calling *FormArray.getRawValue()* right after\n     * the FormArray is constructed from the backend data, usually, in ngOnInit().\n     * @param nonRelationshipAttributes: Attributes that are not belong to the relationship, but exist in the formArray.\n     * A relationship has its own attributes, for example, rs_marriage has REG_PLACE and COUNTRY.\n     * However, on the UI, you not only want to show the 2 fields, but also the partner's ID, NAME, BIRTHDAY, and so on.\n     * And these attributes should be excluded when adding and changing the relationship.\n     *\n     * The Return will either a null object or a relationship object like:\n     * {\n     *   RELATIONSHIP_ID: \"rs_marriage\",\n     *   values: [\n     *     {action: \"add\", REG_PLACE: \"Shanghai\", COUNTRY: \"China\",\n     *      PARTNER_INSTANCES: [\n     *       {ENTITY_ID: \"person\", ROLE_ID: \"wife\", INSTANCE_GUID: \"391E75B02A1811E981F3C33C6FB0A7C1\"}\n     *     ]},\n     *     {action: \"update\", REG_PLACE: \"Beijing\", RELATIONSHIP_INSTANCE_GUID: \"96DF7F706EE011E9B7B5F7E76DA40E87\"},\n     *     {action: \"delete\", RELATIONSHIP_INSTANCE_GUID: \"96DF7F706EE011E9B7B5F7E76DA40E87\"}\n     *   ]\n     * }\n     */\n    /**\n     * Map a FormArray to JOR relationships for adding, updating, or deletion.\n     * @param {?} relationshipID\n     * @param {?} partnerRoles\n     * @param {?} formArray\n     * @param {?} originalArray\n     * @param {?} nonRelationshipAttributes\n     * @return {?}\n     */\n    UiMapperService.prototype.composeChangedRelationship = /**\n     * Map a FormArray to JOR relationships for adding, updating, or deletion.\n     * @param {?} relationshipID\n     * @param {?} partnerRoles\n     * @param {?} formArray\n     * @param {?} originalArray\n     * @param {?} nonRelationshipAttributes\n     * @return {?}\n     */\n    function (relationshipID, partnerRoles, formArray, originalArray, nonRelationshipAttributes) {\n        if (!formArray.dirty) {\n            return null;\n        }\n        /** @type {?} */\n        var relationship = {\n            RELATIONSHIP_ID: relationshipID,\n            values: []\n        };\n        formArray.controls.forEach(function (formGroup) {\n            if (formGroup.dirty) {\n                /** @type {?} */\n                var changedRelationshipValue_1 = {};\n                relationship.values.push(changedRelationshipValue_1);\n                if (formGroup.value['RELATIONSHIP_INSTANCE_GUID']) {\n                    changedRelationshipValue_1['action'] = 'update';\n                    changedRelationshipValue_1['RELATIONSHIP_INSTANCE_GUID'] = formGroup.value['RELATIONSHIP_INSTANCE_GUID'];\n                }\n                else {\n                    changedRelationshipValue_1['action'] = 'add';\n                    changedRelationshipValue_1['PARTNER_INSTANCES'] = [];\n                    partnerRoles.forEach(function (partnerRole) {\n                        return changedRelationshipValue_1['PARTNER_INSTANCES'].push({\n                            ENTITY_ID: partnerRole.ENTITY_ID,\n                            ROLE_ID: partnerRole.ROLE_ID,\n                            INSTANCE_GUID: formGroup.value[partnerRole.ROLE_ID + '_INSTANCE_GUID']\n                        });\n                    });\n                }\n                Object.keys(formGroup['controls']).forEach(function (key) {\n                    if (nonRelationshipAttributes.includes(key) || key.substr(-13) === 'INSTANCE_GUID') {\n                        return;\n                    }\n                    /** @type {?} */\n                    var control = formGroup.get(key);\n                    if (control.dirty) {\n                        changedRelationshipValue_1[key] = control.value;\n                    }\n                });\n            }\n        });\n        originalArray.forEach(function (original) {\n            if (formArray.controls.findIndex(function (formGroup) { return formGroup.value['RELATIONSHIP_INSTANCE_GUID'] === original['RELATIONSHIP_INSTANCE_GUID']; }) === -1) {\n                relationship.values.push({ action: 'delete', RELATIONSHIP_INSTANCE_GUID: original['RELATIONSHIP_INSTANCE_GUID'] });\n            }\n        });\n        return relationship.values.length === 0 ? null : relationship;\n    };\n    UiMapperService.decorators = [\n        { type: Injectable, args: [{\n                    providedIn: 'root'\n                },] }\n    ];\n    /** @nocollapse */\n    UiMapperService.ctorParameters = function () { return []; };\n    /** @nocollapse */ UiMapperService.ngInjectableDef = defineInjectable({ factory: function UiMapperService_Factory() { return new UiMapperService(); }, token: UiMapperService, providedIn: \"root\" });\n    return UiMapperService;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\nvar EntityService = /** @class */ (function () {\n    function EntityService(http, messageService) {\n        this.http = http;\n        this.messageService = messageService;\n        this.fakeUUIDs = [];\n        this.messageService.setMessageStore([\n            { msgCat: 'EXCEPTION', msgName: 'GENERIC',\n                msgText: { EN: { shortText: 'Exception Occurs in Operation: %s', longText: '%s2' } } },\n            { msgCat: 'EXCEPTION', msgName: 'SESSION_EXPIRED',\n                msgText: { EN: { shortText: 'Your session is expired',\n                        longText: 'Your session is expired, please <a href=\"/logon\">re-logon</a>' } } }\n        ], 'EN');\n    }\n    /**\n     * @param {?} host\n     * @return {?}\n     */\n    EntityService.prototype.setOriginalHost = /**\n     * @param {?} host\n     * @return {?}\n     */\n    function (host) {\n        this.originalHost = host;\n    };\n    /**\n     * @param {?} msgStore\n     * @param {?} language\n     * @return {?}\n     */\n    EntityService.prototype.setMessageStore = /**\n     * @param {?} msgStore\n     * @param {?} language\n     * @return {?}\n     */\n    function (msgStore, language) {\n        this.messageService.setMessageStore(msgStore, language);\n    };\n    /**\n     * @return {?}\n     */\n    EntityService.prototype.listEntityID = /**\n     * @return {?}\n     */\n    function () {\n        return this.http.get(this.originalHost + \"/api/entity/EntityIDs\").pipe(catchError(this.handleError('listEntityID')));\n    };\n    /**\n     * @param {?} roleID\n     * @return {?}\n     */\n    EntityService.prototype.listEntityIDbyRole = /**\n     * @param {?} roleID\n     * @return {?}\n     */\n    function (roleID) {\n        return this.http.get(this.originalHost + (\"/api/entity/EntityIDs/\" + roleID)).pipe(catchError(this.handleError('listEntityIDbyRole')));\n    };\n    /**\n     * @param {?} entityID\n     * @return {?}\n     */\n    EntityService.prototype.getEntityMeta = /**\n     * @param {?} entityID\n     * @return {?}\n     */\n    function (entityID) {\n        return this.http.get(this.originalHost + (\"/api/entity/meta/\" + entityID)).pipe(catchError(this.handleError('getEntityMeta')));\n    };\n    /**\n     * @param {?} queryObject\n     * @return {?}\n     */\n    EntityService.prototype.searchEntities = /**\n     * @param {?} queryObject\n     * @return {?}\n     */\n    function (queryObject) {\n        return this.http.post(this.originalHost + \"/api/query\", queryObject, httpOptions).pipe(catchError(this.handleError('searchEntities')));\n    };\n    /**\n     * @param {?} instanceGUID\n     * @return {?}\n     */\n    EntityService.prototype.getEntityInstance = /**\n     * @param {?} instanceGUID\n     * @return {?}\n     */\n    function (instanceGUID) {\n        return this.http.get(this.originalHost + (\"/api/entity/instance/\" + instanceGUID)).pipe(catchError(this.handleError('getEntityInstance')));\n    };\n    /**\n     * @param {?} relationID\n     * @return {?}\n     */\n    EntityService.prototype.getRelationMeta = /**\n     * @param {?} relationID\n     * @return {?}\n     */\n    function (relationID) {\n        return this.http.get(this.originalHost + (\"/api/relation/meta/\" + relationID)).pipe(catchError(this.handleError('getRelationMeta')));\n    };\n    /**\n     * @param {?} entityID\n     * @return {?}\n     */\n    EntityService.prototype.getRelationMetaOfEntity = /**\n     * @param {?} entityID\n     * @return {?}\n     */\n    function (entityID) {\n        return this.http.get(this.originalHost + (\"/api/relation/meta/entity/\" + entityID)).pipe(catchError(this.handleError('getRelationMetaOfEntity')));\n    };\n    /**\n     * @param {?} instance\n     * @return {?}\n     */\n    EntityService.prototype.createEntityInstance = /**\n     * @param {?} instance\n     * @return {?}\n     */\n    function (instance) {\n        return this.http.post(this.originalHost + \"/api/entity\", instance, httpOptions).pipe(catchError(this.handleError('createEntityInstance')));\n    };\n    /**\n     * @param {?} instance\n     * @return {?}\n     */\n    EntityService.prototype.changeEntityInstance = /**\n     * @param {?} instance\n     * @return {?}\n     */\n    function (instance) {\n        return this.http.put(this.originalHost + \"/api/entity\", instance, httpOptions).pipe(catchError(this.handleError('changeEntityInstance')));\n    };\n    /**\n     * @param {?} instanceGUID\n     * @return {?}\n     */\n    EntityService.prototype.deleteEntityInstance = /**\n     * @param {?} instanceGUID\n     * @return {?}\n     */\n    function (instanceGUID) {\n        return this.http.delete(this.originalHost + (\"/api/entity/instance/\" + instanceGUID)).pipe(catchError(this.handleError('deleteEntityInstance')));\n    };\n    /**\n     * @param {?} term\n     * @return {?}\n     */\n    EntityService.prototype.listEntityType = /**\n     * @param {?} term\n     * @return {?}\n     */\n    function (term) {\n        return this.http.get(this.originalHost + (\"/api/model/entity-type/list?term=\" + term)).pipe(catchError(this.handleError('listEntityType')));\n    };\n    /**\n     * @param {?} entityID\n     * @return {?}\n     */\n    EntityService.prototype.getEntityTypeDesc = /**\n     * @param {?} entityID\n     * @return {?}\n     */\n    function (entityID) {\n        return this.http.get(this.originalHost + (\"/api/model/entity-type/desc/\" + entityID)).pipe(catchError(this.handleError('getEntityTypeDesc')));\n    };\n    /**\n     * @param {?} entityType\n     * @return {?}\n     */\n    EntityService.prototype.saveEntityType = /**\n     * @param {?} entityType\n     * @return {?}\n     */\n    function (entityType) {\n        return this.http.post(this.originalHost + \"/api/model/entity-type\", entityType, httpOptions).pipe(catchError(this.handleError('saveEntityType')));\n    };\n    /**\n     * @param {?} term\n     * @return {?}\n     */\n    EntityService.prototype.listRelation = /**\n     * @param {?} term\n     * @return {?}\n     */\n    function (term) {\n        return this.http.get(this.originalHost + (\"/api/model/relation/list?term=\" + term)).pipe(catchError(this.handleError('listRelation')));\n    };\n    /**\n     * @param {?} relationID\n     * @return {?}\n     */\n    EntityService.prototype.getRelationDesc = /**\n     * @param {?} relationID\n     * @return {?}\n     */\n    function (relationID) {\n        return this.http.get(this.originalHost + (\"/api/model/relation/desc/\" + relationID)).pipe(catchError(this.handleError('getRelationDesc')));\n    };\n    /**\n     * @param {?} relation\n     * @return {?}\n     */\n    EntityService.prototype.saveRelation = /**\n     * @param {?} relation\n     * @return {?}\n     */\n    function (relation) {\n        return this.http.post(this.originalHost + \"/api/model/relation\", relation, httpOptions).pipe(catchError(this.handleError('saveRelation')));\n    };\n    /**\n     * @param {?} term\n     * @return {?}\n     */\n    EntityService.prototype.listRelationship = /**\n     * @param {?} term\n     * @return {?}\n     */\n    function (term) {\n        return this.http.get(this.originalHost + (\"/api/model/relationship/list?term=\" + term)).pipe(catchError(this.handleError('listRelationship')));\n    };\n    /**\n     * @param {?} relationshipID\n     * @return {?}\n     */\n    EntityService.prototype.getRelationship = /**\n     * @param {?} relationshipID\n     * @return {?}\n     */\n    function (relationshipID) {\n        return this.http.get(this.originalHost + (\"/api/model/relationship/\" + relationshipID)).pipe(catchError(this.handleError('getRelationship')));\n    };\n    /**\n     * @param {?} relationshipID\n     * @return {?}\n     */\n    EntityService.prototype.getRelationshipDesc = /**\n     * @param {?} relationshipID\n     * @return {?}\n     */\n    function (relationshipID) {\n        return this.http.get(this.originalHost + (\"/api/model/relationship/desc/\" + relationshipID)).pipe(catchError(this.handleError('getRelationshipDesc')));\n    };\n    /**\n     * @param {?} relationship\n     * @return {?}\n     */\n    EntityService.prototype.saveRelationship = /**\n     * @param {?} relationship\n     * @return {?}\n     */\n    function (relationship) {\n        return this.http.post(this.originalHost + \"/api/model/relationship\", relationship, httpOptions).pipe(catchError(this.handleError('saveRelationship')));\n    };\n    /**\n     * @param {?} term\n     * @return {?}\n     */\n    EntityService.prototype.listRole = /**\n     * @param {?} term\n     * @return {?}\n     */\n    function (term) {\n        return this.http.get(this.originalHost + (\"/api/model/role/list?term=\" + term)).pipe(catchError(this.handleError('listRole')));\n    };\n    /**\n     * @param {?} roleID\n     * @return {?}\n     */\n    EntityService.prototype.getRole = /**\n     * @param {?} roleID\n     * @return {?}\n     */\n    function (roleID) {\n        return this.http.get(this.originalHost + (\"/api/model/role/\" + roleID)).pipe(catchError(this.handleError('getRole')));\n    };\n    /**\n     * @param {?} roleID\n     * @return {?}\n     */\n    EntityService.prototype.getRoleDesc = /**\n     * @param {?} roleID\n     * @return {?}\n     */\n    function (roleID) {\n        return this.http.get(this.originalHost + (\"/api/model/role/desc/\" + roleID)).pipe(catchError(this.handleError('getRoleDesc')));\n    };\n    /**\n     * @param {?} role\n     * @return {?}\n     */\n    EntityService.prototype.saveRole = /**\n     * @param {?} role\n     * @return {?}\n     */\n    function (role) {\n        return this.http.post(this.originalHost + \"/api/model/role\", role, httpOptions).pipe(catchError(this.handleError('saveRole')));\n    };\n    /**\n     * @return {?}\n     */\n    EntityService.prototype.generateFakeRelationshipUUID = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var nextPosition = this.fakeUUIDs.length + 1;\n        /** @type {?} */\n        var fakeUUID = 'NewRelationship_' + nextPosition;\n        this.fakeUUIDs.push(fakeUUID);\n        return fakeUUID;\n    };\n    /**\n     * @private\n     * @template T\n     * @param {?=} operation\n     * @param {?=} result\n     * @return {?}\n     */\n    EntityService.prototype.handleError = /**\n     * @private\n     * @template T\n     * @param {?=} operation\n     * @param {?=} result\n     * @return {?}\n     */\n    function (operation, result) {\n        var _this = this;\n        if (operation === void 0) { operation = 'operation'; }\n        return function (error) {\n            // TODO: send the error to remote logging infrastructure\n            console.error(error); // log to console instead\n            if (error.status === 401) {\n                _this.messageService.addMessage('EXCEPTION', 'SESSION_EXPIRED', messageType.Exception);\n            }\n            else {\n                _this.messageService.addMessage('EXCEPTION', 'GENERIC', messageType.Exception, operation, error.message);\n            }\n            // Let the app keep running by returning an empty result.\n            return of((/** @type {?} */ (result)));\n        };\n    };\n    EntityService.decorators = [\n        { type: Injectable, args: [{\n                    providedIn: 'root'\n                },] }\n    ];\n    /** @nocollapse */\n    EntityService.ctorParameters = function () { return [\n        { type: HttpClient },\n        { type: MessageService }\n    ]; };\n    /** @nocollapse */ EntityService.ngInjectableDef = defineInjectable({ factory: function EntityService_Factory() { return new EntityService(inject(HttpClient), inject(MessageService)); }, token: EntityService, providedIn: \"root\" });\n    return EntityService;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar SearchHelp = /** @class */ (function () {\n    function SearchHelp() {\n    }\n    return SearchHelp;\n}());\nvar SearchHelpField = /** @class */ (function () {\n    function SearchHelpField() {\n    }\n    return SearchHelpField;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar SearchHelpComponent = /** @class */ (function () {\n    function SearchHelpComponent(fb, entityService) {\n        this.fb = fb;\n        this.entityService = entityService;\n        this.isSearchHelpModalShown = false;\n        this.isFilterShown = false;\n        this.isSelectAllChecked = false;\n        this.selectedIndex = -1;\n        this.filterFields = [];\n        this.listFields = [];\n        this.listData = [];\n    }\n    Object.defineProperty(SearchHelpComponent.prototype, \"displaySearchHelpModal\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.isSearchHelpModalShown ? 'block' : 'none'; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    SearchHelpComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this.filterFieldsFormGroup = this.fb.group({});\n    };\n    /**\n     * @param {?} searchHelpMeta\n     * @param {?} exportControl\n     * @param {?=} afterExportFn\n     * @return {?}\n     */\n    SearchHelpComponent.prototype.openSearchHelpModal = /**\n     * @param {?} searchHelpMeta\n     * @param {?} exportControl\n     * @param {?=} afterExportFn\n     * @return {?}\n     */\n    function (searchHelpMeta, exportControl, afterExportFn) {\n        var _this = this;\n        this.searchHelpMeta = searchHelpMeta;\n        this.exportControl = exportControl;\n        this.afterExportFn = afterExportFn;\n        this.filterFieldsFormGroup = this.fb.group({});\n        this.filterFields = this.searchHelpMeta.FIELDS.filter(function (fieldMeta) { return fieldMeta.FILTER_POSITION; });\n        this.filterFields.sort(function (a, b) { return a.FILTER_POSITION - b.FILTER_POSITION; });\n        this.filterFields.forEach(function (fieldMeta) {\n            if (fieldMeta.IMPORT && exportControl.get(fieldMeta.FIELD_NAME)) {\n                fieldMeta.DEFAULT_VALUE = exportControl.get(fieldMeta.FIELD_NAME).value;\n            }\n            _this.filterFieldsFormGroup.addControl(fieldMeta.FIELD_NAME, _this.fb.control(fieldMeta.DEFAULT_VALUE));\n        });\n        this.listFields = this.searchHelpMeta.FIELDS.filter(function (fieldMeta) { return fieldMeta.LIST_POSITION; });\n        this.listFields.sort(function (a, b) { return a.LIST_POSITION - b.LIST_POSITION; });\n        if (this.searchHelpMeta.BEHAVIOUR === 'A') {\n            this.search();\n            this.isFilterShown = false;\n        }\n        else {\n            this.isFilterShown = true;\n        }\n        this.isSearchHelpModalShown = true;\n    };\n    /**\n     * @param {?} entityID\n     * @param {?} exportControl\n     * @param {?} readonly\n     * @param {?=} afterExportFn\n     * @return {?}\n     */\n    SearchHelpComponent.prototype.openSearchHelpModalByEntity = /**\n     * @param {?} entityID\n     * @param {?} exportControl\n     * @param {?} readonly\n     * @param {?=} afterExportFn\n     * @return {?}\n     */\n    function (entityID, exportControl, readonly, afterExportFn) {\n        var _this = this;\n        /** @type {?} */\n        var searchHelpMeta = new SearchHelp();\n        searchHelpMeta.OBJECT_NAME = entityID;\n        searchHelpMeta.METHOD = function (entityService) {\n            return function (searchTerm) { return entityService.searchEntities(searchTerm); };\n        }(this.entityService);\n        searchHelpMeta.BEHAVIOUR = 'M';\n        searchHelpMeta.MULTI = false;\n        searchHelpMeta.FUZZY_SEARCH = false;\n        searchHelpMeta.FIELDS = [];\n        searchHelpMeta.READ_ONLY = readonly;\n        searchHelpMeta.ENTITY_ID = entityID;\n        searchHelpMeta.RELATION_ID = entityID;\n        this.entityService.getRelationMeta(entityID)\n            .subscribe(function (data) {\n            /** @type {?} */\n            var relationMeta = (/** @type {?} */ (data));\n            relationMeta.ATTRIBUTES.forEach(function (attribute) {\n                return searchHelpMeta.FIELDS.push({\n                    FIELD_NAME: attribute.ATTR_NAME,\n                    FIELD_DESC: attribute.ATTR_DESC,\n                    IMPORT: false,\n                    EXPORT: false,\n                    LIST_POSITION: attribute.ORDER,\n                    FILTER_POSITION: attribute.ORDER\n                });\n            });\n            searchHelpMeta.FIELDS.push({\n                FIELD_NAME: 'INSTANCE_GUID',\n                FIELD_DESC: 'Instance GUID',\n                IMPORT: false,\n                EXPORT: true,\n                LIST_POSITION: 999,\n                FILTER_POSITION: 0\n            });\n            _this.openSearchHelpModal(searchHelpMeta, exportControl, afterExportFn);\n        });\n    };\n    /**\n     * @return {?}\n     */\n    SearchHelpComponent.prototype.search = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var searchTerm;\n        if (this.searchHelpMeta.FUZZY_SEARCH) {\n            searchTerm = this.fuzzySearchTerm || '';\n        }\n        else {\n            searchTerm = new QueryObject();\n            searchTerm.ENTITY_ID = this.searchHelpMeta.ENTITY_ID;\n            searchTerm.RELATION_ID = this.searchHelpMeta.RELATION_ID;\n            searchTerm.FILTER = [];\n            this.filterFields.forEach(function (fieldMeta) {\n                /** @type {?} */\n                var fieldValue = _this.filterFieldsFormGroup.get(fieldMeta.FIELD_NAME).value;\n                if (fieldValue) {\n                    if (fieldValue.includes('*') || fieldValue.includes('%')) {\n                        searchTerm.FILTER.push({ FIELD_NAME: fieldMeta.FIELD_NAME, OPERATOR: 'CN', LOW: fieldValue });\n                    }\n                    else {\n                        searchTerm.FILTER.push({ FIELD_NAME: fieldMeta.FIELD_NAME, OPERATOR: 'EQ', LOW: fieldValue });\n                    }\n                }\n            });\n        }\n        this.listData = [];\n        this.isSelectAllChecked = false;\n        if (typeof this.searchHelpMeta.METHOD === 'function') {\n            /** @type {?} */\n            var searchHelpMethod = (/** @type {?} */ (this.searchHelpMeta.METHOD));\n            searchHelpMethod(searchTerm).subscribe(function (data) { return _this._generateSearchList(data); });\n        }\n        else if (Array.isArray(this.searchHelpMeta.METHOD)) {\n            this._generateSearchList(this.searchHelpMeta.METHOD);\n        }\n    };\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    SearchHelpComponent.prototype._generateSearchList = /**\n     * @param {?} data\n     * @return {?}\n     */\n    function (data) {\n        var _this = this;\n        data.forEach(function (item) {\n            /** @type {?} */\n            var listItem = { SELECTED: '' };\n            _this.listFields.forEach(function (field) { return listItem[field.FIELD_NAME] = item[field.FIELD_NAME]; });\n            _this.listData.push(listItem);\n        });\n    };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    SearchHelpComponent.prototype.enterSearch = /**\n     * @param {?} $event\n     * @return {?}\n     */\n    function ($event) {\n        if ($event.keyCode === 13) {\n            this.search();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    SearchHelpComponent.prototype.showFilter = /**\n     * @return {?}\n     */\n    function () {\n        this.isFilterShown = true;\n    };\n    /**\n     * @return {?}\n     */\n    SearchHelpComponent.prototype.hideFilter = /**\n     * @return {?}\n     */\n    function () {\n        this.isFilterShown = false;\n    };\n    /**\n     * @return {?}\n     */\n    SearchHelpComponent.prototype.selectAll = /**\n     * @return {?}\n     */\n    function () {\n        this.isSelectAllChecked = !this.isSelectAllChecked;\n        this.listData.forEach(function (data) { return data.SELECTED = !data.SELECTED; });\n    };\n    /**\n     * @return {?}\n     */\n    SearchHelpComponent.prototype.confirmSelection = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // TODO: Currently, only single selection is supported. Multiple selection in later time\n        if (this.searchHelpMeta.READ_ONLY) {\n            return;\n        }\n        this.listFields.forEach(function (listField) {\n            if (_this.exportControl instanceof FormGroup) {\n                /** @type {?} */\n                var exportControl = (/** @type {?} */ (_this.exportControl));\n                /** @type {?} */\n                var exportFieldControl = exportControl.get(listField.FIELD_NAME);\n                if (listField.EXPORT && exportFieldControl) {\n                    exportFieldControl.setValue(_this.listData[_this.selectedIndex][listField.FIELD_NAME]);\n                    exportFieldControl.markAsDirty();\n                }\n            }\n            else {\n                if (listField.EXPORT) {\n                    _this.exportControl[listField.FIELD_NAME] = _this.listData[_this.selectedIndex][listField.FIELD_NAME];\n                }\n            }\n        });\n        if (this.afterExportFn) {\n            this.afterExportFn();\n        }\n        this.isSearchHelpModalShown = false;\n    };\n    /**\n     * @return {?}\n     */\n    SearchHelpComponent.prototype.closeSearchHelpModal = /**\n     * @return {?}\n     */\n    function () {\n        this.isSearchHelpModalShown = false;\n    };\n    SearchHelpComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'dk-app-search-help',\n                    template: \"<div class=\\\"modal fade\\\" id=\\\"searchHelp\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\"\\n     [ngClass]=\\\"{'show': isSearchHelpModalShown}\\\" [ngStyle]=\\\"{'display': displaySearchHelpModal}\\\">\\n  <div class=\\\"modal-dialog modal-dialog-centered modal-lg\\\" role=\\\"document\\\">\\n    <div class=\\\"modal-content dk-search-help-content\\\">\\n      <div class=\\\"modal-header dk-search-help-header\\\">\\n        <h6 class=\\\"modal-title\\\" id=\\\"addRelationship\\\">{{searchHelpMeta?.OBJECT_NAME}} ({{listData.length}})</h6>\\n        <button type=\\\"button\\\" class=\\\"close\\\" (click)=\\\"closeSearchHelpModal()\\\">\\n          <span aria-hidden=\\\"true\\\">&times;</span>\\n        </button>\\n      </div>\\n\\n      <div class=\\\"modal-body\\\">\\n        <div *ngIf=\\\"isFilterShown\\\" class=\\\"card mb-2\\\">\\n          <div *ngIf=\\\"searchHelpMeta && searchHelpMeta.FUZZY_SEARCH\\\" class=\\\"mt-2 mx-2 row\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Search\\\" [(ngModel)]=\\\"fuzzySearchTerm\\\" (keyup)=\\\"enterSearch($event)\\\">\\n          </div>\\n          <div class=\\\"mt-2 mx-2 row\\\" [formGroup]=\\\"filterFieldsFormGroup\\\">\\n            <div *ngFor=\\\"let filterField of filterFields\\\" class=\\\"col-6 form-group row\\\">\\n              <label for=\\\"{{filterField.FIELD_NAME}}\\\" class=\\\"col-6 col-form-label col-form-label-sm text-right\\\">\\n                {{filterField.FIELD_DESC}}:</label>\\n              <input id=\\\"{{filterField.FIELD_NAME}}\\\" name=\\\"{{filterField.FIELD_NAME}}\\\" formControlName=\\\"{{filterField.FIELD_NAME}}\\\"\\n                     type=\\\"text\\\" class=\\\"col-6 form-control form-control-sm\\\" [readonly]=\\\"filterField.FILTER_DISP_ONLY\\\" (keyup)=\\\"enterSearch($event)\\\">\\n            </div>\\n          </div>\\n\\n          <div class=\\\"mb-2\\\">\\n            <button type=\\\"button\\\" id=\\\"search\\\" class=\\\"btn btn-sm btn-primary float-right mr-2\\\" (click)=\\\"search()\\\">\\n              Search\\n            </button>\\n          </div>\\n        </div>\\n\\n        <button *ngIf=\\\"!isFilterShown\\\" type=\\\"button\\\" class=\\\"btn btn-link float-right\\\" (click)=\\\"showFilter()\\\">Show Filter</button>\\n        <button *ngIf=\\\"isFilterShown\\\" type=\\\"button\\\" class=\\\"btn btn-link float-right\\\" (click)=\\\"hideFilter()\\\">Hide Filter</button>\\n\\n        <table class=\\\"table table-bordered table-sm table-hover dk-search-table\\\">\\n          <thead class=\\\"thead-light\\\">\\n          <tr>\\n            <th scope=\\\"col\\\">\\n              <input *ngIf=\\\"searchHelpMeta?.MULTI\\\" type=\\\"checkbox\\\" [(ngModel)]=\\\"isSelectAllChecked\\\" (click)=\\\"selectAll()\\\">\\n            </th>\\n            <th *ngFor=\\\"let listField of listFields\\\">{{listField.FIELD_DESC}}</th>\\n          </tr>\\n          </thead>\\n\\n          <tbody>\\n          <tr *ngFor=\\\"let item of listData; let i = index\\\">\\n            <td>\\n              <input *ngIf=\\\"!searchHelpMeta.MULTI\\\" type=\\\"radio\\\" name=\\\"selectedItem\\\" [value]=\\\"i\\\" [(ngModel)]=\\\"selectedIndex\\\" (dblclick)=\\\"confirmSelection()\\\">\\n              <input *ngIf=\\\"searchHelpMeta.MULTI\\\" type=\\\"checkbox\\\" [(ngModel)]=\\\"item.SELECTED\\\">\\n            </td>\\n            <td *ngFor=\\\"let listField of listFields\\\">{{item[listField.FIELD_NAME]}}</td>\\n          </tr>\\n          </tbody>\\n        </table>\\n      </div>\\n\\n      <div class=\\\"modal-footer dk-search-help-footer\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" (click)=\\\"closeSearchHelpModal()\\\">Cancel</button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-primary\\\" (click)=\\\"confirmSelection()\\\" [disabled]=\\\"searchHelpMeta?.READ_ONLY\\\">Confirm</button>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\",\n                    styles: [\".dk-search-help-header{padding:.3rem .5rem;background-color:#e9ecef}.dk-search-help-footer{padding:.5rem}.dk-search-table{display:block;overflow:scroll;max-height:40rem;white-space:nowrap;border:none}.dk-search-help-content{border:1px solid rgba(0,0,0,.4);box-shadow:8px 5px 5px rgba(0,0,0,.2)}\"]\n                }] }\n    ];\n    /** @nocollapse */\n    SearchHelpComponent.ctorParameters = function () { return [\n        { type: FormBuilder },\n        { type: EntityService }\n    ]; };\n    return SearchHelpComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar JorAngularComponent = /** @class */ (function () {\n    function JorAngularComponent() {\n    }\n    /**\n     * @return {?}\n     */\n    JorAngularComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n    };\n    JorAngularComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'dk-jor-angular',\n                    template: \"\\n    <p>\\n      jor-angular works!\\n    </p>\\n  \"\n                }] }\n    ];\n    /** @nocollapse */\n    JorAngularComponent.ctorParameters = function () { return []; };\n    return JorAngularComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar JorAngularModule = /** @class */ (function () {\n    function JorAngularModule() {\n    }\n    JorAngularModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [\n                        JorAngularComponent,\n                        SearchHelpComponent\n                    ],\n                    imports: [\n                        CommonModule,\n                        HttpClientModule,\n                        FormsModule,\n                        ReactiveFormsModule\n                    ],\n                    exports: [\n                        JorAngularComponent,\n                        SearchHelpComponent\n                    ]\n                },] }\n    ];\n    return JorAngularModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { Entity, Relationship, RelationshipInstance, PartnerInstance, PartnerRole, EntityMeta, Attribute, Role, RoleRelation, RelationshipMeta, Involve, RelationMeta, Association, FieldsMappingPair, EntityRelation, Selection, Projection, QueryObject, Sort, EntityType, Relation, RelationshipH, RoleH, RoleMeta, UiMapperService, EntityService, SearchHelpComponent, JorAngularModule, SearchHelp, SearchHelpField, JorAngularComponent as ɵa };\n\n//# sourceMappingURL=jor-angular.js.map","var map = {\n\t\"./entity/entity.module\": [\n\t\t\"./src/app/entity/entity.module.ts\",\n\t\t\"common\",\n\t\t\"entity-entity-module\"\n\t],\n\t\"./model/model.module\": [\n\t\t\"./src/app/model/model.module.ts\",\n\t\t\"common\",\n\t\t\"model-model-module\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";\nmodule.exports = webpackAsyncContext;","import { NgModule } from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\n\nconst routes: Routes = [\n  { path: 'entity', loadChildren: './entity/entity.module#EntityModule'},\n  { path: 'model', loadChildren: './model/model.module#ModelModule'},\n  { path: '',   redirectTo: '/entity/list', pathMatch: 'full' }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes)\n  ],\n  exports: [ RouterModule ]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div class=\\\"container-fluid\\\">\\n  <router-outlet></router-outlet>\\n</div>\\n\"","import { Component } from '@angular/core';\nimport {EntityService} from 'jor-angular';\nimport {environment} from '../environments/environment';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  constructor( private entityService: EntityService) {\n    this.entityService.setOriginalHost(environment.originalHost);\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport {HttpClientModule} from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport {RouteReuseStrategy} from '@angular/router';\nimport {CustomReuseStrategy} from './custom.reuse.strategy';\nimport {NgbModule} from '@ng-bootstrap/ng-bootstrap';\nimport {JorAngularModule} from 'jor-angular';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    HttpClientModule,\n    AppRoutingModule,\n    NgbModule.forRoot(),\n    BrowserModule,\n    JorAngularModule\n  ],\n  providers: [\n    {provide: RouteReuseStrategy, useClass: CustomReuseStrategy}\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n\n}\n","/**\n * The custom route reuse strategy inherits the \"RouteReuseStrategy\" to achieve a very usual case,\n * which by default, Angular doesn't support.\n * 1. Search for items based on filter conditions.\n * 2. Navigate to one of the item to the detail page(component).\n * 3. Navigate back to searched item list without re-initializing the search&list component again.\n * This requires the Angular route to save the search&list component, and restore it whenever back.\n * The detail solution is described in following thread:\n * https://stackoverflow.com/questions/41280471/how-to-implement-routereusestrategy-shoulddetach-for-specific-routes-in-angular\n */\nimport {ActivatedRouteSnapshot, DetachedRouteHandle, RouteReuseStrategy} from '@angular/router';\n\nexport class CustomReuseStrategy implements RouteReuseStrategy {\n  routesToCache: string[] = ['list'];\n  storedRouteHandles = new Map<string, DetachedRouteHandle>();\n\n  /**\n   * When navigation from a reusable component, and if shouldReuseRoute return false,\n   * this method is invoked to decide whether the current route should be stored.\n   * @param route\n   */\n  shouldDetach(route: ActivatedRouteSnapshot): boolean {\n    // console.log('detaching', route);\n    return this.routesToCache.indexOf(route.routeConfig.path) > -1;\n  }\n\n  /**\n   * If the current route need to be stored, that is shouldDetach return true,\n   * then on this method, you can implement a way to store routes. Usually in a Map.\n   * @param route\n   * @param handle\n   */\n  store(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle): void {\n    // console.log('store', route);\n    this.storedRouteHandles.set(route.routeConfig.path, handle);\n  }\n\n  /**\n   * When navigation to a reusable component, and if shouldReuseRoute return false,\n   * this method is invoked to decide whether the target component can be get from a reuse buffer.\n   * @param route\n   */\n  shouldAttach(route: ActivatedRouteSnapshot): boolean {\n    // console.log('shouldAttach', route);\n    return this.storedRouteHandles.has(route.routeConfig.path);\n  }\n\n  /**\n   * If shouldAttach return true, then this method is invoke to retrieve the component from the buffer.\n   * @param route\n   */\n  retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle {\n    return this.storedRouteHandles.get(route.routeConfig.path);\n  }\n\n  /**\n   * By default, Angular doesn't re-initializing the same component if the navigation is not to\n   * a different one. For example, you switch different entity ID in the same entity type detail page.\n   * In this way, shouldReuseRoute should return true to avoid executing other methods in this Class.\n   * However, if you navigate from search&list component to entity detail component, then the method should return false.\n   * So that other methods can be executed to decide whether the search&list component should be stored for future reuse.\n   * @param future\n   * @param curr\n   */\n  shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {\n    // console.log('shouldReuseRoute, future:', future, 'current:', curr);\n    return future.routeConfig === curr.routeConfig;\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\nexport const environment = {\n  production: false,\n  originalHost: 'http://localhost:3000'\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}