{"version":3,"sources":["./dist/jor-angular/fesm2015/jor-angular.js","./src/app/app.component.html","./src/$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.css","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/custom.reuse.strategy.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmI;AAClD;AACvD;AACuB;AACgB;AACkD;AACpE;;AAE/C;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,WAAW,EAQV;AACD;AACA;AACA,WAAW,EAOV;AACD;AACA;AACA,WAAW,EAYV;AACD;AACA;AACA,WAAW,EAQV;AACD;AACA;AACA,WAAW,EAKV;AACD;AACA;AACA,WAAW,EASV;AACD;AACA;AACA,WAAW,EA6CV;AACD;AACA;AACA,WAAW,EAaV;AACD;AACA;AACA,WAAW,EAOV;AACD;AACA;AACA,WAAW,EAmBV;AACD;AACA;AACA,WAAW,EASV;AACD;AACA;AACA,WAAW,EAWV;AACD;AACA;AACA,WAAW,EAWV;AACD;AACA;AACA,WAAW,EAKV;AACD;AACA;AACA,WAAW,EAmBV;AACD;AACA;AACA,WAAW,EAWV;AACD;AACA;AACA,WAAW,EAOV;AACD;AACA;AACA,WAAW,EAWV;AACD;AACA;AACA,WAAW,EAOV;AACD;AACA;AACA,WAAW,EAeV;AACD;AACA;AACA,WAAW,EAeV;AACD;AACA;AACA,WAAW,EAiBV;AACD;AACA;AACA,WAAW,EAeV;AACD;AACA;AACA,WAAW,EAeV;AACD;AACA;AACA,WAAW,EAeV;AACD;AACA;AACA,WAAW,EAiCV;AACD;AACA;AACA,WAAW,EAeV;AACD;AACA;AACA,WAAW,EAmCV;AACD;AACA;AACA,WAAW,EAOV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,iCAAiC;AACjC;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,2BAA2B,EAAE;AAC7B,yCAAyC;AACzC;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,0CAA0C,uFAAuF;AACjI;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA,aAAa;AACb;AACA;AACA;AACA,2CAA2C,wEAAkB,EAAE,8CAA8C,8BAA8B,EAAE,8CAA8C;;AAE3L;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA,iBAAiB,gEAAW,EAAE,qCAAqC;AACnE;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,0BAA0B,MAAM,kEAAkE,EAAE,EAAE;AACtG,aAAa;AACb,0BAA0B,MAAM;AAChC,mGAAmG,EAAE;AACrG;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,+EAA+E,iEAAU;AACzF;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,0EAA0E,OAAO,QAAQ,iEAAU;AACnG;AACA;AACA;AACA,eAAe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,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,4EAA4E,UAAU,QAAQ,iEAAU;AACxG;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,iCAAiC;AACjC;AACA,+EAA+E,8DAAW;AAC1F;AACA;AACA,uEAAuE,8DAAW;AAClF;AACA;AACA,mBAAmB,+CAAE,aAAa,EAAE;AACpC,SAAS;AACT;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,+DAAU,EAAE;AACxB,KAAK,OAAO,iEAAc;AAC1B;AACA,yCAAyC,wEAAkB,EAAE,4CAA4C,0BAA0B,8DAAQ,CAAC,+DAAU,GAAG,8DAAQ,CAAC,iEAAc,GAAG,EAAE,4CAA4C;AACjO,WAAW,EAqBV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,WAAW,EAmBV;AACD;AACA;AACA,WAAW,EAqBV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,kCAAkC,uDAAuD;AACzF;AACA,gBAAgB;AAChB;AACA;AACA,qDAAqD;AACrD;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,6CAA6C,EAAE;AAC/C;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,gDAAgD,oEAAoE;AACpH;AACA;AACA,gDAAgD,oEAAoE;AACpH;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,iDAAiD,EAAE;AACnD;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,8BAA8B;AAC9B;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,8CAA8C,wDAAS;AACvD,2BAA2B,EAAE;AAC7B,kDAAkD,EAAE;AACpD,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,0HAA0H,+BAA+B,gBAAgB,kCAAkC,qQAAqQ,6BAA6B,IAAI,iBAAiB,yIAAyI,slBAAslB,wBAAwB,mFAAmF,wBAAwB,uCAAuC,wBAAwB,YAAY,wBAAwB,uBAAuB,wBAAwB,2kCAA2kC,sBAAsB,6GAA6G,kYAAkY,4BAA4B;AAClmG,iDAAiD,oBAAoB,yBAAyB,uBAAuB,cAAc,iBAAiB,cAAc,gBAAgB,iBAAiB,mBAAmB,YAAY,wBAAwB,gCAAgC,sCAAsC;AAChU,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,0DAAW,EAAE;AACzB,KAAK;AACL;AACA,WAAW,EAmCV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAqCV;AACD;AACA;AACA,WAAW,EAKV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,kCAAkC,yDAAyD;AAC3F,mEAAmE,0DAAG;AACtE,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI,iEAAU;AACvB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;AACA,gDAAgD,wEAAkB,EAAE,mDAAmD,iCAAiC,8DAAQ,iBAAiB,EAAE,mDAAmD;AACtO,WAAW,EAMV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,wDAAwD,kCAAkC;AAC1F,6CAA6C,4BAA4B;AACzE;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,gCAAgC,0DAAW;AAC3C;AACA,sCAAsC,yDAAU;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,mBAAmB,wDAAS;AAC5B;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,sBAAsB;AAC3B,KAAK;AACL;AACA,mDAAmD,wEAAkB,EAAE,sDAAsD,oCAAoC,8DAAQ,iBAAiB,8DAAQ,wBAAwB,EAAE,sDAAsD;AAClR,WAAW,EAWV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,oEAAoE;AACvF;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,sBAAsB,6DAA6D;AACnF;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,4jHAA4jH,WAAW,wIAAwI,cAAc;AAC7tH;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,wBAAwB,OAAO,mDAAK,EAAE;AACtC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,mBAAmB,OAAO,mDAAK,EAAE;AACjC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,2BAA2B,OAAO,uDAAS,+BAA+B,gBAAgB,IAAI;AAC9F;AACA,WAAW,EAgBV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,gPAAgP,wBAAwB;AACxQ;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,wBAAwB,OAAO,mDAAK,EAAE;AACtC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,mBAAmB,OAAO,mDAAK,EAAE;AACjC;AACA,WAAW,EASV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,oEAAoE;AACvF;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;A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","file":"main-es2015.js","sourcesContent":["import { Injectable, ɵɵdefineInjectable, ɵɵinject, Component, Input, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpClientModule } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { messageType, MessageService } from 'ui-message-angular';\nimport { FormGroup, FormBuilder, FormControl, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/entity.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass Entity {\n}\nif (false) {\n    /** @type {?} */\n    Entity.prototype.ENTITY_ID;\n    /** @type {?} */\n    Entity.prototype.INSTANCE_GUID;\n    /** @type {?} */\n    Entity.prototype.relationships;\n    /* Skipping unhandled member: [key: string]: any;*/\n}\nclass Relationship {\n}\nif (false) {\n    /** @type {?} */\n    Relationship.prototype.RELATIONSHIP_ID;\n    /** @type {?} */\n    Relationship.prototype.SELF_ROLE_ID;\n    /** @type {?} */\n    Relationship.prototype.values;\n}\nclass RelationshipInstance {\n}\nif (false) {\n    /** @type {?} */\n    RelationshipInstance.prototype.action;\n    /** @type {?} */\n    RelationshipInstance.prototype.RELATIONSHIP_INSTANCE_GUID;\n    /** @type {?} */\n    RelationshipInstance.prototype.VALID_FROM;\n    /** @type {?} */\n    RelationshipInstance.prototype.VALID_TO;\n    /** @type {?} */\n    RelationshipInstance.prototype.PARTNER_INSTANCES;\n    /* Skipping unhandled member: [key: string]: any;*/\n}\nclass PartnerInstance {\n}\nif (false) {\n    /** @type {?} */\n    PartnerInstance.prototype.ENTITY_ID;\n    /** @type {?} */\n    PartnerInstance.prototype.ROLE_ID;\n    /** @type {?} */\n    PartnerInstance.prototype.INSTANCE_GUID;\n    /* Skipping unhandled member: [key: string]: any;*/\n}\nclass PartnerRole {\n}\nif (false) {\n    /** @type {?} */\n    PartnerRole.prototype.ENTITY_ID;\n    /** @type {?} */\n    PartnerRole.prototype.ROLE_ID;\n}\nclass EntityMeta {\n}\nif (false) {\n    /** @type {?} */\n    EntityMeta.prototype.ENTITY_ID;\n    /** @type {?} */\n    EntityMeta.prototype.ENTITY_DESC;\n    /** @type {?} */\n    EntityMeta.prototype.VERSION_NO;\n    /** @type {?} */\n    EntityMeta.prototype.ROLES;\n}\nclass Attribute {\n}\nif (false) {\n    /** @type {?} */\n    Attribute.prototype.ATTR_GUID;\n    /** @type {?} */\n    Attribute.prototype.RELATION_ID;\n    /** @type {?} */\n    Attribute.prototype.ATTR_NAME;\n    /** @type {?} */\n    Attribute.prototype.ATTR_DESC;\n    /** @type {?} */\n    Attribute.prototype.DATA_ELEMENT;\n    /** @type {?} */\n    Attribute.prototype.SEARCH_HELP_ID;\n    /** @type {?} */\n    Attribute.prototype.SEARCH_HELP_EXPORT_FIELD;\n    /** @type {?} */\n    Attribute.prototype.DOMAIN_ID;\n    /** @type {?} */\n    Attribute.prototype.DOMAIN_TYPE;\n    /** @type {?} */\n    Attribute.prototype.REG_EXPR;\n    /** @type {?} */\n    Attribute.prototype.DOMAIN_ENTITY_ID;\n    /** @type {?} */\n    Attribute.prototype.DOMAIN_RELATION_ID;\n    /** @type {?} */\n    Attribute.prototype.LABEL_TEXT;\n    /** @type {?} */\n    Attribute.prototype.LIST_HEADER_TEXT;\n    /** @type {?} */\n    Attribute.prototype.DATA_TYPE;\n    /** @type {?} */\n    Attribute.prototype.DATA_LENGTH;\n    /** @type {?} */\n    Attribute.prototype.DECIMAL;\n    /** @type {?} */\n    Attribute.prototype.CAPITAL_ONLY;\n    /** @type {?} */\n    Attribute.prototype.UNSIGNED;\n    /** @type {?} */\n    Attribute.prototype.ORDER;\n    /** @type {?} */\n    Attribute.prototype.PRIMARY_KEY;\n    /** @type {?} */\n    Attribute.prototype.AUTO_INCREMENT;\n}\nclass Role {\n}\nif (false) {\n    /** @type {?} */\n    Role.prototype.ROLE_ID;\n    /** @type {?} */\n    Role.prototype.ROLE_DESC;\n    /** @type {?} */\n    Role.prototype.CONDITIONAL_ATTR;\n    /** @type {?} */\n    Role.prototype.CONDITIONAL_VALUE;\n    /** @type {?} */\n    Role.prototype.RELATIONS;\n    /** @type {?} */\n    Role.prototype.RELATIONSHIPS;\n}\nclass RoleRelation {\n}\nif (false) {\n    /** @type {?} */\n    RoleRelation.prototype.RELATION_ID;\n    /** @type {?} */\n    RoleRelation.prototype.RELATION_DESC;\n    /** @type {?} */\n    RoleRelation.prototype.CARDINALITY;\n}\nclass RelationshipMeta {\n}\nif (false) {\n    /** @type {?} */\n    RelationshipMeta.prototype.RELATIONSHIP_ID;\n    /** @type {?} */\n    RelationshipMeta.prototype.RELATIONSHIP_DESC;\n    /** @type {?} */\n    RelationshipMeta.prototype.VALID_PERIOD;\n    /** @type {?} */\n    RelationshipMeta.prototype.SINGLETON;\n    /** @type {?} */\n    RelationshipMeta.prototype.CREATE_BY;\n    /** @type {?} */\n    RelationshipMeta.prototype.CREATE_TIME;\n    /** @type {?} */\n    RelationshipMeta.prototype.LAST_CHANGE_BY;\n    /** @type {?} */\n    RelationshipMeta.prototype.LAST_CHANGE_TIME;\n    /** @type {?} */\n    RelationshipMeta.prototype.INVOLVES;\n}\nclass Involve {\n}\nif (false) {\n    /** @type {?} */\n    Involve.prototype.ROLE_ID;\n    /** @type {?} */\n    Involve.prototype.ROLE_DESC;\n    /** @type {?} */\n    Involve.prototype.CARDINALITY;\n    /** @type {?} */\n    Involve.prototype.DIRECTION;\n}\nclass RelationMeta {\n}\nif (false) {\n    /** @type {?} */\n    RelationMeta.prototype.RELATION_ID;\n    /** @type {?} */\n    RelationMeta.prototype.RELATION_DESC;\n    /** @type {?} */\n    RelationMeta.prototype.VERSION_NO;\n    /** @type {?} */\n    RelationMeta.prototype.ATTRIBUTES;\n    /** @type {?} */\n    RelationMeta.prototype.ASSOCIATIONS;\n}\nclass Association {\n}\nif (false) {\n    /** @type {?} */\n    Association.prototype.ASSOCIATION_NAME;\n    /** @type {?} */\n    Association.prototype.RIGHT_RELATION_ID;\n    /** @type {?} */\n    Association.prototype.CARDINALITY;\n    /** @type {?} */\n    Association.prototype.FOREIGN_KEY_CHECK;\n    /** @type {?} */\n    Association.prototype.FIELDS_MAPPING;\n}\nclass FieldsMappingPair {\n}\nif (false) {\n    /** @type {?} */\n    FieldsMappingPair.prototype.LEFT_FIELD;\n    /** @type {?} */\n    FieldsMappingPair.prototype.RIGHT_FIELD;\n}\nclass EntityRelation {\n}\nif (false) {\n    /** @type {?} */\n    EntityRelation.prototype.RELATION_ID;\n    /** @type {?} */\n    EntityRelation.prototype.RELATION_DESC;\n    /** @type {?} */\n    EntityRelation.prototype.CARDINALITY;\n    /** @type {?} */\n    EntityRelation.prototype.ROLE_ID;\n    /** @type {?} */\n    EntityRelation.prototype.CONDITIONAL_ATTR;\n    /** @type {?} */\n    EntityRelation.prototype.CONDITIONAL_VALUE;\n    /** @type {?} */\n    EntityRelation.prototype.EMPTY;\n    /** @type {?} */\n    EntityRelation.prototype.DISABLED;\n    /** @type {?} */\n    EntityRelation.prototype.ATTRIBUTES;\n}\nclass Selection {\n}\nif (false) {\n    /** @type {?} */\n    Selection.prototype.RELATION_ID;\n    /** @type {?} */\n    Selection.prototype.FIELD_NAME;\n    /** @type {?} */\n    Selection.prototype.OPERATOR;\n    /** @type {?} */\n    Selection.prototype.LOW;\n    /** @type {?} */\n    Selection.prototype.HIGH;\n}\nclass Projection {\n}\nif (false) {\n    /** @type {?} */\n    Projection.prototype.RELATION_ID;\n    /** @type {?} */\n    Projection.prototype.FIELD_NAME;\n    /** @type {?} */\n    Projection.prototype.ALIAS;\n}\nclass QueryObject {\n}\nif (false) {\n    /** @type {?} */\n    QueryObject.prototype.ENTITY_ID;\n    /** @type {?} */\n    QueryObject.prototype.RELATION_ID;\n    /** @type {?} */\n    QueryObject.prototype.PROJECTION;\n    /** @type {?} */\n    QueryObject.prototype.FILTER;\n    /** @type {?} */\n    QueryObject.prototype.SORT;\n}\nclass Sort {\n}\nif (false) {\n    /** @type {?} */\n    Sort.prototype.FIELD_NAME;\n    /** @type {?} */\n    Sort.prototype.RELATION_ID;\n    /** @type {?} */\n    Sort.prototype.ORDER;\n}\nclass EntityType {\n}\nif (false) {\n    /** @type {?} */\n    EntityType.prototype.ENTITY_ID;\n    /** @type {?} */\n    EntityType.prototype.ENTITY_DESC;\n    /** @type {?} */\n    EntityType.prototype.VERSION_NO;\n    /** @type {?} */\n    EntityType.prototype.CREATE_BY;\n    /** @type {?} */\n    EntityType.prototype.CREATE_TIME;\n    /** @type {?} */\n    EntityType.prototype.LAST_CHANGE_BY;\n    /** @type {?} */\n    EntityType.prototype.LAST_CHANGE_TIME;\n}\nclass Relation {\n}\nif (false) {\n    /** @type {?} */\n    Relation.prototype.RELATION_ID;\n    /** @type {?} */\n    Relation.prototype.RELATION_DESC;\n    /** @type {?} */\n    Relation.prototype.VERSION_NO;\n    /** @type {?} */\n    Relation.prototype.CREATE_BY;\n    /** @type {?} */\n    Relation.prototype.CREATE_TIME;\n    /** @type {?} */\n    Relation.prototype.LAST_CHANGE_BY;\n    /** @type {?} */\n    Relation.prototype.LAST_CHANGE_TIME;\n}\nclass RelationshipH {\n}\nif (false) {\n    /** @type {?} */\n    RelationshipH.prototype.RELATIONSHIP_ID;\n    /** @type {?} */\n    RelationshipH.prototype.RELATIONSHIP_DESC;\n    /** @type {?} */\n    RelationshipH.prototype.VALID_PERIOD;\n    /** @type {?} */\n    RelationshipH.prototype.VERSION_NO;\n    /** @type {?} */\n    RelationshipH.prototype.CREATE_BY;\n    /** @type {?} */\n    RelationshipH.prototype.CREATE_TIME;\n    /** @type {?} */\n    RelationshipH.prototype.LAST_CHANGE_BY;\n    /** @type {?} */\n    RelationshipH.prototype.LAST_CHANGE_TIME;\n}\nclass RoleH {\n}\nif (false) {\n    /** @type {?} */\n    RoleH.prototype.ROLE_ID;\n    /** @type {?} */\n    RoleH.prototype.ROLE_DESC;\n    /** @type {?} */\n    RoleH.prototype.VERSION_NO;\n    /** @type {?} */\n    RoleH.prototype.CREATE_BY;\n    /** @type {?} */\n    RoleH.prototype.CREATE_TIME;\n    /** @type {?} */\n    RoleH.prototype.LAST_CHANGE_BY;\n    /** @type {?} */\n    RoleH.prototype.LAST_CHANGE_TIME;\n}\nclass RoleMeta {\n}\nif (false) {\n    /** @type {?} */\n    RoleMeta.prototype.ROLE_ID;\n    /** @type {?} */\n    RoleMeta.prototype.ROLE_DESC;\n    /** @type {?} */\n    RoleMeta.prototype.CREATE_BY;\n    /** @type {?} */\n    RoleMeta.prototype.CREATE_TIME;\n    /** @type {?} */\n    RoleMeta.prototype.LAST_CHANGE_BY;\n    /** @type {?} */\n    RoleMeta.prototype.LAST_CHANGE_TIME;\n    /** @type {?} */\n    RoleMeta.prototype.RELATIONS;\n}\nclass DataElementH {\n}\nif (false) {\n    /** @type {?} */\n    DataElementH.prototype.ELEMENT_ID;\n    /** @type {?} */\n    DataElementH.prototype.ELEMENT_DESC;\n    /** @type {?} */\n    DataElementH.prototype.VERSION_NO;\n    /** @type {?} */\n    DataElementH.prototype.CREATE_BY;\n    /** @type {?} */\n    DataElementH.prototype.CREATE_TIME;\n    /** @type {?} */\n    DataElementH.prototype.LAST_CHANGE_BY;\n    /** @type {?} */\n    DataElementH.prototype.LAST_CHANGE_TIME;\n}\nclass DataElementMeta {\n}\nif (false) {\n    /** @type {?} */\n    DataElementMeta.prototype.ELEMENT_ID;\n    /** @type {?} */\n    DataElementMeta.prototype.ELEMENT_DESC;\n    /** @type {?} */\n    DataElementMeta.prototype.LABEL_TEXT;\n    /** @type {?} */\n    DataElementMeta.prototype.LIST_HEADER_TEXT;\n    /** @type {?} */\n    DataElementMeta.prototype.DOMAIN_ID;\n    /** @type {?} */\n    DataElementMeta.prototype.DATA_TYPE;\n    /** @type {?} */\n    DataElementMeta.prototype.DATA_LENGTH;\n    /** @type {?} */\n    DataElementMeta.prototype.DECIMAL;\n    /** @type {?} */\n    DataElementMeta.prototype.SEARCH_HELP_ID;\n    /** @type {?} */\n    DataElementMeta.prototype.SEARCH_HELP_EXPORT_FIELD;\n    /** @type {?} */\n    DataElementMeta.prototype.PARAMETER_ID;\n    /** @type {?} */\n    DataElementMeta.prototype.VERSION_NO;\n    /** @type {?} */\n    DataElementMeta.prototype.CREATE_BY;\n    /** @type {?} */\n    DataElementMeta.prototype.CREATE_TIME;\n    /** @type {?} */\n    DataElementMeta.prototype.LAST_CHANGE_BY;\n    /** @type {?} */\n    DataElementMeta.prototype.LAST_CHANGE_TIME;\n}\nclass DataDomainH {\n}\nif (false) {\n    /** @type {?} */\n    DataDomainH.prototype.DOMAIN_ID;\n    /** @type {?} */\n    DataDomainH.prototype.DOMAIN_DESC;\n    /** @type {?} */\n    DataDomainH.prototype.VERSION_NO;\n    /** @type {?} */\n    DataDomainH.prototype.CREATE_BY;\n    /** @type {?} */\n    DataDomainH.prototype.CREATE_TIME;\n    /** @type {?} */\n    DataDomainH.prototype.LAST_CHANGE_BY;\n    /** @type {?} */\n    DataDomainH.prototype.LAST_CHANGE_TIME;\n}\nclass DataDomainMeta {\n}\nif (false) {\n    /** @type {?} */\n    DataDomainMeta.prototype.DOMAIN_ID;\n    /** @type {?} */\n    DataDomainMeta.prototype.DOMAIN_DESC;\n    /** @type {?} */\n    DataDomainMeta.prototype.DATA_TYPE;\n    /** @type {?} */\n    DataDomainMeta.prototype.DATA_LENGTH;\n    /** @type {?} */\n    DataDomainMeta.prototype.DOMAIN_TYPE;\n    /** @type {?} */\n    DataDomainMeta.prototype.DECIMAL;\n    /** @type {?} */\n    DataDomainMeta.prototype.UNSIGNED;\n    /** @type {?} */\n    DataDomainMeta.prototype.CAPITAL_ONLY;\n    /** @type {?} */\n    DataDomainMeta.prototype.REG_EXPR;\n    /** @type {?} */\n    DataDomainMeta.prototype.ENTITY_ID;\n    /** @type {?} */\n    DataDomainMeta.prototype.RELATION_ID;\n    /** @type {?} */\n    DataDomainMeta.prototype.DOMAIN_VALUES;\n    /** @type {?} */\n    DataDomainMeta.prototype.VERSION_NO;\n    /** @type {?} */\n    DataDomainMeta.prototype.CREATE_BY;\n    /** @type {?} */\n    DataDomainMeta.prototype.CREATE_TIME;\n    /** @type {?} */\n    DataDomainMeta.prototype.LAST_CHANGE_BY;\n    /** @type {?} */\n    DataDomainMeta.prototype.LAST_CHANGE_TIME;\n}\nclass DataDomainValue {\n}\nif (false) {\n    /** @type {?} */\n    DataDomainValue.prototype.LOW_VALUE;\n    /** @type {?} */\n    DataDomainValue.prototype.LOW_VALUE_TEXT;\n    /** @type {?} */\n    DataDomainValue.prototype.HIGH_VALUE;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/ui-mapper.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass UiMapperService {\n    constructor() {\n    }\n    /**\n     * Map a FormGroup to a JOR relation(with cardinality [0..1] and [1..1]) for adding or updating.\n     * @param {?} formGroup\n     * @param {?} keys\n     * @param {?=} isNew\n     * @return {?}\n     */\n    composeChangedRelation(formGroup, keys, isNew = true) {\n        if (!formGroup.dirty || !keys || Object.keys(keys).length === 0) {\n            return {};\n        }\n        /** @type {?} */\n        const changedRelation = { action: isNew ? 'add' : 'update' };\n        Object.keys(keys).forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => changedRelation[key] = keys[key] || formGroup.value[key]));\n        Object.keys(formGroup.controls).forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => {\n            /** @type {?} */\n            const control = formGroup.get(key);\n            if (control.dirty) {\n                changedRelation[key] = control.value;\n            }\n        }));\n        return changedRelation;\n    }\n    /**\n     * Map a FormArray to JOR relation(with cardinality [0..n] or [1..n]) for adding, updating, or deletion.\n     * @param {?} formArray\n     * @param {?} originalArray\n     * @param {?} keys\n     * @return {?}\n     */\n    composeChangedRelationArray(formArray, originalArray, keys) {\n        if (!formArray.dirty || !keys || Object.keys(keys).length === 0) {\n            return [];\n        }\n        if (!originalArray) {\n            originalArray = [];\n        }\n        /** @type {?} */\n        const changedRelationArray = [];\n        formArray.controls.forEach((/**\n         * @param {?} formGroup\n         * @return {?}\n         */\n        formGroup => {\n            if (formGroup.dirty) {\n                /** @type {?} */\n                const changedRelation = {};\n                changedRelationArray.push(changedRelation);\n                /** @type {?} */\n                const index = originalArray.findIndex((/**\n                 * @param {?} element\n                 * @return {?}\n                 */\n                element => {\n                    /** @type {?} */\n                    let found = true;\n                    Object.keys(keys).forEach((/**\n                     * @param {?} key\n                     * @return {?}\n                     */\n                    key => {\n                        if (keys[key]) {\n                            return;\n                        }\n                        found = found && (element[key] === formGroup.value[key]);\n                    }));\n                    return found;\n                }));\n                changedRelation['action'] = index === -1 ? 'add' : 'update';\n                Object.keys(keys).forEach((/**\n                 * @param {?} key\n                 * @return {?}\n                 */\n                key => changedRelation[key] = keys[key] || formGroup.value[key]));\n                Object.keys(formGroup['controls']).forEach((/**\n                 * @param {?} key\n                 * @return {?}\n                 */\n                key => {\n                    /** @type {?} */\n                    const control = formGroup.get(key);\n                    if (control.dirty) {\n                        changedRelation[key] = control.value;\n                    }\n                }));\n            }\n        }));\n        originalArray.forEach((/**\n         * @param {?} originalRelation\n         * @return {?}\n         */\n        originalRelation => {\n            /** @type {?} */\n            const index = formArray.controls.findIndex((/**\n             * @param {?} element\n             * @return {?}\n             */\n            element => {\n                /** @type {?} */\n                let found = true;\n                Object.keys(keys).forEach((/**\n                 * @param {?} key\n                 * @return {?}\n                 */\n                key => {\n                    if (keys[key]) {\n                        return;\n                    }\n                    found = found && (element.value[key] === originalRelation[key]);\n                }));\n                return found;\n            }));\n            if (index === -1) {\n                /** @type {?} */\n                const deletedRelation = { action: 'delete' };\n                Object.keys(keys).forEach((/**\n                 * @param {?} key\n                 * @return {?}\n                 */\n                key => deletedRelation[key] = keys[key] || originalRelation[key]));\n                changedRelationArray.push(deletedRelation);\n            }\n        }));\n        return changedRelationArray;\n    }\n    /**\n     * Map a FormArray to JOR relationships for adding, updating, or deletion.\n     * @param {?} relationshipID\n     * @param {?} partnerRoles\n     * @param {?} formArray\n     * @param {?} originalArray\n     * @param {?} nonRelationshipAttributes\n     * @return {?}\n     */\n    composeChangedRelationship(relationshipID, partnerRoles, formArray, originalArray, nonRelationshipAttributes) {\n        if (!formArray.dirty) {\n            return null;\n        }\n        /** @type {?} */\n        const relationship = {\n            RELATIONSHIP_ID: relationshipID,\n            values: []\n        };\n        formArray.controls.forEach((/**\n         * @param {?} formGroup\n         * @return {?}\n         */\n        formGroup => {\n            if (formGroup.dirty) {\n                /** @type {?} */\n                const changedRelationshipValue = {};\n                relationship.values.push(changedRelationshipValue);\n                if (formGroup.value['RELATIONSHIP_INSTANCE_GUID']) {\n                    changedRelationshipValue['action'] = 'update';\n                    changedRelationshipValue['RELATIONSHIP_INSTANCE_GUID'] = formGroup.value['RELATIONSHIP_INSTANCE_GUID'];\n                }\n                else {\n                    changedRelationshipValue['action'] = 'add';\n                    changedRelationshipValue['PARTNER_INSTANCES'] = [];\n                    partnerRoles.forEach((/**\n                     * @param {?} partnerRole\n                     * @return {?}\n                     */\n                    partnerRole => changedRelationshipValue['PARTNER_INSTANCES'].push({\n                        ENTITY_ID: partnerRole.ENTITY_ID,\n                        ROLE_ID: partnerRole.ROLE_ID,\n                        INSTANCE_GUID: formGroup.value[partnerRole.ROLE_ID + '_INSTANCE_GUID']\n                    })));\n                }\n                Object.keys(formGroup['controls']).forEach((/**\n                 * @param {?} key\n                 * @return {?}\n                 */\n                key => {\n                    if (nonRelationshipAttributes.includes(key) || key.substr(-13) === 'INSTANCE_GUID') {\n                        return;\n                    }\n                    /** @type {?} */\n                    const control = formGroup.get(key);\n                    if (control.dirty) {\n                        changedRelationshipValue[key] = control.value;\n                    }\n                }));\n            }\n        }));\n        originalArray.forEach((/**\n         * @param {?} original\n         * @return {?}\n         */\n        original => {\n            if (formArray.controls.findIndex((/**\n             * @param {?} formGroup\n             * @return {?}\n             */\n            formGroup => formGroup.value['RELATIONSHIP_INSTANCE_GUID'] === original['RELATIONSHIP_INSTANCE_GUID'])) === -1) {\n                relationship.values.push({ action: 'delete', RELATIONSHIP_INSTANCE_GUID: original['RELATIONSHIP_INSTANCE_GUID'] });\n            }\n        }));\n        return relationship.values.length === 0 ? null : relationship;\n    }\n}\nUiMapperService.decorators = [\n    { type: Injectable, args: [{\n                providedIn: 'root'\n            },] }\n];\n/** @nocollapse */\nUiMapperService.ctorParameters = () => [];\n/** @nocollapse */ UiMapperService.ɵprov = ɵɵdefineInjectable({ factory: function UiMapperService_Factory() { return new UiMapperService(); }, token: UiMapperService, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/entity.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\nclass EntityService {\n    /**\n     * @param {?} http\n     * @param {?} messageService\n     */\n    constructor(http, messageService) {\n        this.http = http;\n        this.messageService = messageService;\n        this.originalHost = '';\n        this.fakeUUIDs = [];\n        this.messageService.setMessageStore([\n            { msgCat: 'EXCEPTION', msgName: 'GENERIC',\n                msgText: { EN: { shortText: 'Exception Occurs in Operation: %s', longText: '%s2' } } },\n            { msgCat: 'EXCEPTION', msgName: 'SESSION_EXPIRED',\n                msgText: { EN: { shortText: 'Your session is expired',\n                        longText: 'Your session is expired, please <a href=\"/logon\">re-logon</a>' } } }\n        ], 'EN');\n    }\n    /**\n     * @param {?} host\n     * @return {?}\n     */\n    setOriginalHost(host) {\n        this.originalHost = host;\n    }\n    /**\n     * @param {?} msgStore\n     * @param {?} language\n     * @return {?}\n     */\n    setMessageStore(msgStore, language) {\n        this.messageService.setMessageStore(msgStore, language);\n    }\n    /**\n     * List all entity IDs in the system\n     * @return {?}\n     */\n    listEntityID() {\n        return this.http.get(this.originalHost + `/api/entity/EntityIDs`).pipe(catchError(this.handleError('listEntityID')));\n    }\n    /**\n     * List entity IDs by a given role ID\n     * @param {?} roleID\n     * @return {?}\n     */\n    listEntityIDbyRole(roleID) {\n        return this.http.get(this.originalHost + `/api/entity/EntityIDs/${roleID}`).pipe(catchError(this.handleError('listEntityIDbyRole')));\n    }\n    /**\n     * Return the entity meta for a given entity ID\n     * @param {?} entityID\n     * @return {?}\n     */\n    getEntityMeta(entityID) {\n        return this.http.get(this.originalHost + `/api/entity/meta/${entityID}`).pipe(catchError(this.handleError('getEntityMeta')));\n    }\n    /**\n     * Return a list of entity objects according to the description of a given query object\n     * @param {?} queryObject\n     * @return {?}\n     */\n    searchEntities(queryObject) {\n        return this.http.post(this.originalHost + `/api/query`, queryObject, httpOptions).pipe(catchError(this.handleError('searchEntities')));\n    }\n    /**\n     * Return an entity instance for a given entity instance GUID\n     * @param {?} instanceGUID\n     * @return {?}\n     */\n    getEntityInstance(instanceGUID) {\n        return this.http.get(this.originalHost + `/api/entity/instance/${instanceGUID}`).pipe(catchError(this.handleError('getEntityInstance')));\n    }\n    /**\n     * Return a relation's meta data for a given relation ID\n     * @param {?} relationID\n     * @return {?}\n     */\n    getRelationMeta(relationID) {\n        return this.http.get(this.originalHost + `/api/relation/meta/${relationID}`).pipe(catchError(this.handleError('getRelationMeta')));\n    }\n    /**\n     * Return all relations' meta data for a given entity ID\n     * @param {?} entityID\n     * @return {?}\n     */\n    getRelationMetaOfEntity(entityID) {\n        return this.http.get(this.originalHost + `/api/relation/meta/entity/${entityID}`).pipe(catchError(this.handleError('getRelationMetaOfEntity')));\n    }\n    /**\n     * Create a new entity instance\n     * @param {?} instance\n     * @return {?}\n     */\n    createEntityInstance(instance) {\n        return this.http.post(this.originalHost + `/api/entity`, instance, httpOptions).pipe(catchError(this.handleError('createEntityInstance')));\n    }\n    /**\n     * Change an existing entity instance\n     * @param {?} instance\n     * @return {?}\n     */\n    changeEntityInstance(instance) {\n        return this.http.put(this.originalHost + `/api/entity`, instance, httpOptions).pipe(catchError(this.handleError('changeEntityInstance')));\n    }\n    /**\n     * Delete an entity instance from a given instance GUID\n     * @param {?} instanceGUID\n     * @return {?}\n     */\n    deleteEntityInstance(instanceGUID) {\n        return this.http.delete(this.originalHost + `/api/entity/instance/${instanceGUID}`).pipe(catchError(this.handleError('deleteEntityInstance')));\n    }\n    /**\n     * Return entity types(IDs) for a given search term\n     * @param {?} term\n     * @return {?}\n     */\n    listEntityType(term) {\n        return this.http.get(this.originalHost + `/api/model/entity-types?term=${term}`).pipe(catchError(this.handleError('listEntityType')));\n    }\n    /**\n     * Return the description of a given entity type(ID)\n     * @param {?} entityID\n     * @return {?}\n     */\n    getEntityTypeDesc(entityID) {\n        return this.http.get(this.originalHost + `/api/model/entity-types/${entityID}/desc`).pipe(catchError(this.handleError('getEntityTypeDesc')));\n    }\n    /**\n     * Save an entity type after changing or creation\n     * @param {?} entityType\n     * @return {?}\n     */\n    saveEntityType(entityType) {\n        return this.http.post(this.originalHost + `/api/model/entity-types`, entityType, httpOptions).pipe(catchError(this.handleError('saveEntityType')));\n    }\n    /**\n     * Return a list of relations in the system according to the search term\n     * @param {?} term\n     * @return {?}\n     */\n    listRelation(term) {\n        return this.http.get(this.originalHost + `/api/model/relations?term=${term}`).pipe(catchError(this.handleError('listRelation')));\n    }\n    /**\n     * Return the description of a given relation ID\n     * @param {?} relationID\n     * @return {?}\n     */\n    getRelationDesc(relationID) {\n        return this.http.get(this.originalHost + `/api/model/relations/${relationID}/desc`).pipe(catchError(this.handleError('getRelationDesc')));\n    }\n    /**\n     * Save a relation after changing or creation\n     * @param {?} relation\n     * @return {?}\n     */\n    saveRelation(relation) {\n        return this.http.post(this.originalHost + `/api/model/relations`, relation, httpOptions).pipe(catchError(this.handleError('saveRelation')));\n    }\n    /**\n     * Return a list of relationships in the system according to the search term\n     * @param {?} term\n     * @return {?}\n     */\n    listRelationship(term) {\n        return this.http.get(this.originalHost + `/api/model/relationships?term=${term}`).pipe(catchError(this.handleError('listRelationship')));\n    }\n    /**\n     * Return a relationship definition from a given relationship ID\n     * @param {?} relationshipID\n     * @return {?}\n     */\n    getRelationship(relationshipID) {\n        return this.http.get(this.originalHost + `/api/model/relationships/${relationshipID}`).pipe(catchError(this.handleError('getRelationship')));\n    }\n    /**\n     * Return the description of a given relationship ID\n     * @param {?} relationshipID\n     * @return {?}\n     */\n    getRelationshipDesc(relationshipID) {\n        return this.http.get(this.originalHost + `/api/model/relationships/${relationshipID}/desc`).pipe(catchError(this.handleError('getRelationshipDesc')));\n    }\n    /**\n     * Save a relationship after changing or creation\n     * @param {?} relationship\n     * @return {?}\n     */\n    saveRelationship(relationship) {\n        return this.http.post(this.originalHost + `/api/model/relationships`, relationship, httpOptions).pipe(catchError(this.handleError('saveRelationship')));\n    }\n    /**\n     * Return a list of roles in the system according to the search term\n     * @param {?} term\n     * @return {?}\n     */\n    listRole(term) {\n        return this.http.get(this.originalHost + `/api/model/roles?term=${term}`).pipe(catchError(this.handleError('listRole')));\n    }\n    /**\n     * Return a role definition from a given role ID\n     * @param {?} roleID\n     * @return {?}\n     */\n    getRole(roleID) {\n        return this.http.get(this.originalHost + `/api/model/roles/${roleID}`).pipe(catchError(this.handleError('getRole')));\n    }\n    /**\n     * Return the description of a given role ID\n     * @param {?} roleID\n     * @return {?}\n     */\n    getRoleDesc(roleID) {\n        return this.http.get(this.originalHost + `/api/model/roles/${roleID}/desc`).pipe(catchError(this.handleError('getRoleDesc')));\n    }\n    /**\n     * Save a role after changing or creation\n     * @param {?} role\n     * @return {?}\n     */\n    saveRole(role) {\n        return this.http.post(this.originalHost + `/api/model/roles`, role, httpOptions).pipe(catchError(this.handleError('saveRole')));\n    }\n    /**\n     * Return a list of data elements in the system according to the search term\n     * @param {?} term\n     * @return {?}\n     */\n    listDataElement(term) {\n        return this.http.get(this.originalHost + `/api/model/data-elements?term=${term}`).pipe(catchError(this.handleError('listDataElement')));\n    }\n    /**\n     * Return a data element definition from a given element ID\n     * @param {?} elementID\n     * @return {?}\n     */\n    getDataElement(elementID) {\n        return this.http.get(this.originalHost + `/api/model/data-elements/${elementID}`).pipe(catchError(this.handleError('getDataElement')));\n    }\n    /**\n     * Return the description of a given data element ID\n     * @param {?} elementID\n     * @return {?}\n     */\n    getDataElementDesc(elementID) {\n        return this.http.get(this.originalHost + `/api/model/data-elements/${elementID}/desc`).pipe(catchError(this.handleError('getDataElementDesc')));\n    }\n    /**\n     * Save a data element after changing or creation\n     * @param {?} element\n     * @return {?}\n     */\n    saveDataElement(element) {\n        return this.http.post(this.originalHost + `/api/model/data-elements`, element, httpOptions).pipe(catchError(this.handleError('saveDataElement')));\n    }\n    /**\n     * Return a list of data domains in the system according to the search term\n     * @param {?} term\n     * @return {?}\n     */\n    listDataDomain(term) {\n        return this.http.get(this.originalHost + `/api/model/data-domains?term=${term}`).pipe(catchError(this.handleError('listDataDomain')));\n    }\n    /**\n     * Return a data domain definition from a given domain ID\n     * @param {?} domainID\n     * @return {?}\n     */\n    getDataDomain(domainID) {\n        return this.http.get(this.originalHost + `/api/model/data-domains/${domainID}`).pipe(catchError(this.handleError('getDataDomain')));\n    }\n    /**\n     * Return the description of a given data domain ID\n     * @param {?} domainID\n     * @return {?}\n     */\n    getDataDomainDesc(domainID) {\n        return this.http.get(this.originalHost + `/api/model/data-domains/${domainID}/desc`).pipe(catchError(this.handleError('getDataDomainDesc')));\n    }\n    /**\n     * Save a data domain after changing or creation\n     * @param {?} domain\n     * @return {?}\n     */\n    saveDataDomain(domain) {\n        return this.http.post(this.originalHost + `/api/model/data-domains`, domain, httpOptions).pipe(catchError(this.handleError('saveDataDomain')));\n    }\n    /**\n     * Get data element meta\n     * @param {?} elementID\n     * @return {?}\n     */\n    getElementMeta(elementID) {\n        return this.http.get(this.originalHost + `/api/model/element-meta/${elementID}`).pipe(catchError(this.handleError('getElementMeta')));\n    }\n    /**\n     * Return a fake relationship ID before saving\n     * @return {?}\n     */\n    generateFakeRelationshipUUID() {\n        /** @type {?} */\n        const nextPosition = this.fakeUUIDs.length + 1;\n        /** @type {?} */\n        const fakeUUID = 'NewRelationship_' + nextPosition;\n        this.fakeUUIDs.push(fakeUUID);\n        return fakeUUID;\n    }\n    /**\n     * @private\n     * @template T\n     * @param {?=} operation\n     * @param {?=} result\n     * @return {?}\n     */\n    handleError(operation = 'operation', result) {\n        return (/**\n         * @param {?} error\n         * @return {?}\n         */\n        (error) => {\n            // TODO: send the error to remote logging infrastructure\n            console.error(error); // log to console instead\n            if (error.status === 401) {\n                this.messageService.addMessage('EXCEPTION', 'SESSION_EXPIRED', messageType.Exception);\n            }\n            else {\n                this.messageService.addMessage('EXCEPTION', 'GENERIC', messageType.Exception, operation, error.message);\n            }\n            // Let the app keep running by returning an empty result.\n            return of((/** @type {?} */ (result)));\n        });\n    }\n}\nEntityService.decorators = [\n    { type: Injectable, args: [{\n                providedIn: 'root'\n            },] }\n];\n/** @nocollapse */\nEntityService.ctorParameters = () => [\n    { type: HttpClient },\n    { type: MessageService }\n];\n/** @nocollapse */ EntityService.ɵprov = ɵɵdefineInjectable({ factory: function EntityService_Factory() { return new EntityService(ɵɵinject(HttpClient), ɵɵinject(MessageService)); }, token: EntityService, providedIn: \"root\" });\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    EntityService.prototype.originalHost;\n    /**\n     * @type {?}\n     * @private\n     */\n    EntityService.prototype.fakeUUIDs;\n    /**\n     * @type {?}\n     * @private\n     */\n    EntityService.prototype.http;\n    /**\n     * @type {?}\n     * @private\n     */\n    EntityService.prototype.messageService;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/search-help/search-help.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass SearchHelp {\n}\nif (false) {\n    /** @type {?} */\n    SearchHelp.prototype.OBJECT_NAME;\n    /** @type {?} */\n    SearchHelp.prototype.METHOD;\n    /** @type {?} */\n    SearchHelp.prototype.BEHAVIOUR;\n    /** @type {?} */\n    SearchHelp.prototype.MULTI;\n    /** @type {?} */\n    SearchHelp.prototype.FUZZY_SEARCH;\n    /** @type {?} */\n    SearchHelp.prototype.READ_ONLY;\n    /** @type {?} */\n    SearchHelp.prototype.ENTITY_ID;\n    /** @type {?} */\n    SearchHelp.prototype.RELATION_ID;\n    /** @type {?} */\n    SearchHelp.prototype.FIELDS;\n}\nclass SearchHelpField {\n}\nif (false) {\n    /** @type {?} */\n    SearchHelpField.prototype.RELATION_ID;\n    /** @type {?} */\n    SearchHelpField.prototype.FIELD_NAME;\n    /** @type {?} */\n    SearchHelpField.prototype.FIELD_DESC;\n    /** @type {?} */\n    SearchHelpField.prototype.IMPORT;\n    /** @type {?} */\n    SearchHelpField.prototype.EXPORT;\n    /** @type {?} */\n    SearchHelpField.prototype.IE_FIELD_NAME;\n    /** @type {?} */\n    SearchHelpField.prototype.LIST_POSITION;\n    /** @type {?} */\n    SearchHelpField.prototype.FILTER_POSITION;\n    /** @type {?} */\n    SearchHelpField.prototype.FILTER_DISP_ONLY;\n    /** @type {?} */\n    SearchHelpField.prototype.DEFAULT_VALUE;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/search-help/search-help.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass SearchHelpComponent {\n    /**\n     * @param {?} fb\n     * @param {?} entityService\n     */\n    constructor(fb, entityService) {\n        this.fb = fb;\n        this.entityService = entityService;\n        this.isSearchHelpModalShown = false;\n        this.isFilterShown = false;\n        this.isSelectAllChecked = false;\n        this.selectedIndex = -1;\n        this.filterFields = [];\n        this.listFields = [];\n        this.listData = [];\n    }\n    /**\n     * @return {?}\n     */\n    get displaySearchHelpModal() { return this.isSearchHelpModalShown ? 'block' : 'none'; }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.filterFieldsFormGroup = this.fb.group({});\n    }\n    /**\n     * @param {?} searchHelpMeta\n     * @param {?} exportControl\n     * @param {?=} afterExportFn\n     * @return {?}\n     */\n    openSearchHelpModal(searchHelpMeta, exportControl, afterExportFn) {\n        this.searchHelpMeta = searchHelpMeta;\n        this.exportControl = exportControl;\n        this.afterExportFn = afterExportFn;\n        this.filterFieldsFormGroup = this.fb.group({});\n        this.filterFields = this.searchHelpMeta.FIELDS.filter((/**\n         * @param {?} fieldMeta\n         * @return {?}\n         */\n        fieldMeta => fieldMeta.FILTER_POSITION));\n        this.filterFields.sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => a.FILTER_POSITION - b.FILTER_POSITION));\n        this.filterFields.forEach((/**\n         * @param {?} fieldMeta\n         * @return {?}\n         */\n        fieldMeta => {\n            if (fieldMeta.IMPORT) {\n                /** @type {?} */\n                const ieFieldName = fieldMeta.IE_FIELD_NAME || fieldMeta.FIELD_NAME;\n                if (exportControl.get(ieFieldName)) {\n                    fieldMeta.DEFAULT_VALUE = exportControl.get(ieFieldName).value;\n                }\n            }\n            this.filterFieldsFormGroup.addControl(fieldMeta.FIELD_NAME, this.fb.control(fieldMeta.DEFAULT_VALUE));\n        }));\n        this.listFields = this.searchHelpMeta.FIELDS.filter((/**\n         * @param {?} fieldMeta\n         * @return {?}\n         */\n        fieldMeta => fieldMeta.LIST_POSITION));\n        this.listFields.sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => a.LIST_POSITION - b.LIST_POSITION));\n        if (this.searchHelpMeta.BEHAVIOUR === 'A') {\n            this.search();\n            this.isFilterShown = false;\n        }\n        else {\n            this.isFilterShown = true;\n        }\n        this.isSearchHelpModalShown = true;\n    }\n    /**\n     * @param {?} entityID\n     * @param {?} relationID\n     * @param {?} exportControl\n     * @param {?} readonly\n     * @param {?=} exportField\n     * @param {?=} domainID\n     * @param {?=} afterExportFn\n     * @return {?}\n     */\n    openSearchHelpModalByEntity(entityID, relationID, exportControl, readonly, exportField, domainID, afterExportFn) {\n        /** @type {?} */\n        const searchHelpMeta = new SearchHelp();\n        searchHelpMeta.OBJECT_NAME = entityID;\n        searchHelpMeta.METHOD = (/**\n         * @param {?} entityService\n         * @return {?}\n         */\n        function (entityService) {\n            return (/**\n             * @param {?} searchTerm\n             * @return {?}\n             */\n            (searchTerm) => entityService.searchEntities(searchTerm));\n        })(this.entityService);\n        searchHelpMeta.BEHAVIOUR = 'M';\n        searchHelpMeta.MULTI = false;\n        searchHelpMeta.FUZZY_SEARCH = false;\n        searchHelpMeta.FIELDS = [];\n        searchHelpMeta.READ_ONLY = readonly;\n        searchHelpMeta.ENTITY_ID = entityID;\n        searchHelpMeta.RELATION_ID = relationID;\n        this.entityService.getRelationMeta(relationID)\n            .subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => {\n            /** @type {?} */\n            const relationMeta = (/** @type {?} */ (data));\n            relationMeta.ATTRIBUTES.forEach((/**\n             * @param {?} attribute\n             * @return {?}\n             */\n            attribute => searchHelpMeta.FIELDS.push({\n                FIELD_NAME: attribute.ATTR_NAME,\n                FIELD_DESC: attribute.LIST_HEADER_TEXT,\n                IE_FIELD_NAME: attribute.DOMAIN_ID === domainID ? exportField : null,\n                IMPORT: attribute.PRIMARY_KEY || attribute.DOMAIN_ID === domainID,\n                EXPORT: attribute.PRIMARY_KEY || attribute.DOMAIN_ID === domainID,\n                LIST_POSITION: attribute.ORDER,\n                FILTER_POSITION: attribute.ORDER\n            })));\n            searchHelpMeta.FIELDS.push({\n                FIELD_NAME: 'INSTANCE_GUID',\n                FIELD_DESC: 'Instance GUID',\n                IMPORT: false,\n                EXPORT: true,\n                LIST_POSITION: 999,\n                FILTER_POSITION: 0\n            });\n            this.openSearchHelpModal(searchHelpMeta, exportControl, afterExportFn);\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    search() {\n        /** @type {?} */\n        let searchTerm;\n        if (this.searchHelpMeta.FUZZY_SEARCH) {\n            searchTerm = this.fuzzySearchTerm || '';\n        }\n        else {\n            searchTerm = new QueryObject();\n            searchTerm.ENTITY_ID = this.searchHelpMeta.ENTITY_ID;\n            searchTerm.RELATION_ID = this.searchHelpMeta.RELATION_ID;\n            searchTerm.FILTER = [];\n            this.filterFields.forEach((/**\n             * @param {?} fieldMeta\n             * @return {?}\n             */\n            fieldMeta => {\n                /** @type {?} */\n                const fieldValue = this.filterFieldsFormGroup.get(fieldMeta.FIELD_NAME).value;\n                if (fieldValue) {\n                    if (fieldValue.includes('*') || fieldValue.includes('%')) {\n                        searchTerm.FILTER.push({ FIELD_NAME: fieldMeta.FIELD_NAME, OPERATOR: 'CN', LOW: fieldValue });\n                    }\n                    else {\n                        searchTerm.FILTER.push({ FIELD_NAME: fieldMeta.FIELD_NAME, OPERATOR: 'EQ', LOW: fieldValue });\n                    }\n                }\n            }));\n        }\n        this.listData = [];\n        this.isSelectAllChecked = false;\n        if (typeof this.searchHelpMeta.METHOD === 'function') {\n            /** @type {?} */\n            const searchHelpMethod = (/** @type {?} */ (this.searchHelpMeta.METHOD));\n            searchHelpMethod(searchTerm).subscribe((/**\n             * @param {?} data\n             * @return {?}\n             */\n            data => this._generateSearchList(data)));\n        }\n        else if (Array.isArray(this.searchHelpMeta.METHOD)) {\n            this._generateSearchList(this.searchHelpMeta.METHOD);\n        }\n    }\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    _generateSearchList(data) {\n        data.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => {\n            /** @type {?} */\n            const listItem = { SELECTED: '' };\n            this.listFields.forEach((/**\n             * @param {?} field\n             * @return {?}\n             */\n            field => listItem[field.FIELD_NAME] = item[field.FIELD_NAME]));\n            this.listData.push(listItem);\n        }));\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    enterSearch($event) {\n        if ($event.keyCode === 13) {\n            this.search();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    showFilter() {\n        this.isFilterShown = true;\n    }\n    /**\n     * @return {?}\n     */\n    hideFilter() {\n        this.isFilterShown = false;\n    }\n    /**\n     * @return {?}\n     */\n    selectAll() {\n        this.isSelectAllChecked = !this.isSelectAllChecked;\n        this.listData.forEach((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => data.SELECTED = !data.SELECTED));\n    }\n    /**\n     * @return {?}\n     */\n    confirmSelection() {\n        // TODO: Currently, only single selection is supported. Multiple selection in later time\n        if (this.searchHelpMeta.READ_ONLY) {\n            return;\n        }\n        this.listFields.forEach((/**\n         * @param {?} listField\n         * @return {?}\n         */\n        listField => {\n            if (this.exportControl instanceof FormGroup) {\n                /** @type {?} */\n                const exportControl = (/** @type {?} */ (this.exportControl));\n                /** @type {?} */\n                const ieFieldName = listField.IE_FIELD_NAME || listField.FIELD_NAME;\n                /** @type {?} */\n                const exportFieldControl = exportControl.get(ieFieldName);\n                if (listField.EXPORT && exportFieldControl) {\n                    exportFieldControl.setValue(this.listData[this.selectedIndex][listField.FIELD_NAME]);\n                    exportFieldControl.markAsDirty();\n                }\n            }\n            else {\n                if (listField.EXPORT) {\n                    this.exportControl[listField.FIELD_NAME] = this.listData[this.selectedIndex][listField.FIELD_NAME];\n                }\n            }\n        }));\n        if (this.afterExportFn) {\n            this.afterExportFn();\n        }\n        this.listData = [];\n        this.isSearchHelpModalShown = false;\n    }\n    /**\n     * @return {?}\n     */\n    closeSearchHelpModal() {\n        this.isSearchHelpModalShown = false;\n    }\n}\nSearchHelpComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'dk-app-search-help',\n                template: \"<div class=\\\"modal fade\\\" id=\\\"searchHelp\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\"\\n     [ngClass]=\\\"{'show': isSearchHelpModalShown}\\\" [ngStyle]=\\\"{'display': displaySearchHelpModal}\\\">\\n  <div class=\\\"modal-dialog modal-dialog-centered modal-lg\\\" role=\\\"document\\\">\\n    <div class=\\\"modal-content dk-search-help-content\\\">\\n      <div class=\\\"modal-header dk-search-help-header\\\">\\n        <h6 class=\\\"modal-title\\\" id=\\\"addRelationship\\\">{{searchHelpMeta?.OBJECT_NAME}} ({{listData.length}})</h6>\\n        <button type=\\\"button\\\" class=\\\"close\\\" (click)=\\\"closeSearchHelpModal()\\\">\\n          <span aria-hidden=\\\"true\\\">&times;</span>\\n        </button>\\n      </div>\\n\\n      <div class=\\\"modal-body\\\">\\n        <div *ngIf=\\\"isFilterShown\\\" class=\\\"card mb-2\\\">\\n          <div *ngIf=\\\"searchHelpMeta && searchHelpMeta.FUZZY_SEARCH\\\" class=\\\"mt-2 mx-2 row\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Search\\\" [(ngModel)]=\\\"fuzzySearchTerm\\\" (keyup)=\\\"enterSearch($event)\\\">\\n          </div>\\n          <div class=\\\"mt-2 mx-2 row\\\" [formGroup]=\\\"filterFieldsFormGroup\\\">\\n            <div *ngFor=\\\"let filterField of filterFields\\\" class=\\\"col-6 form-group row\\\">\\n              <label for=\\\"{{filterField.FIELD_NAME}}\\\" class=\\\"col-6 col-form-label col-form-label-sm text-right\\\">\\n                {{filterField.FIELD_DESC}}:</label>\\n              <input id=\\\"{{filterField.FIELD_NAME}}\\\" name=\\\"{{filterField.FIELD_NAME}}\\\" formControlName=\\\"{{filterField.FIELD_NAME}}\\\"\\n                     type=\\\"text\\\" class=\\\"col-6 form-control form-control-sm\\\" [readonly]=\\\"filterField.FILTER_DISP_ONLY\\\" (keyup)=\\\"enterSearch($event)\\\">\\n            </div>\\n          </div>\\n\\n          <div class=\\\"mb-2\\\">\\n            <button type=\\\"button\\\" id=\\\"search\\\" class=\\\"btn btn-sm btn-primary float-right mr-2\\\" (click)=\\\"search()\\\">\\n              Search\\n            </button>\\n          </div>\\n        </div>\\n\\n        <button *ngIf=\\\"!isFilterShown\\\" type=\\\"button\\\" class=\\\"btn btn-link float-right\\\" (click)=\\\"showFilter()\\\">Show Filter</button>\\n        <button *ngIf=\\\"isFilterShown\\\" type=\\\"button\\\" class=\\\"btn btn-link float-right\\\" (click)=\\\"hideFilter()\\\">Hide Filter</button>\\n\\n        <table class=\\\"table table-bordered table-sm table-hover dk-search-table\\\">\\n          <thead class=\\\"thead-light\\\">\\n          <tr>\\n            <th scope=\\\"col\\\">\\n              <input *ngIf=\\\"searchHelpMeta?.MULTI\\\" type=\\\"checkbox\\\" [(ngModel)]=\\\"isSelectAllChecked\\\" (click)=\\\"selectAll()\\\">\\n            </th>\\n            <th *ngFor=\\\"let listField of listFields\\\">{{listField.FIELD_DESC}}</th>\\n          </tr>\\n          </thead>\\n\\n          <tbody>\\n          <tr *ngFor=\\\"let item of listData; let i = index\\\">\\n            <td>\\n              <input *ngIf=\\\"!searchHelpMeta.MULTI\\\" type=\\\"radio\\\" name=\\\"selectedIndex\\\" [value]=\\\"i\\\" [(ngModel)]=\\\"selectedIndex\\\" (dblclick)=\\\"confirmSelection()\\\">\\n              <input *ngIf=\\\"searchHelpMeta.MULTI\\\" type=\\\"checkbox\\\" [(ngModel)]=\\\"item.SELECTED\\\">\\n            </td>\\n            <td *ngFor=\\\"let listField of listFields\\\">{{item[listField.FIELD_NAME]}}</td>\\n          </tr>\\n          </tbody>\\n        </table>\\n      </div>\\n\\n      <div class=\\\"modal-footer dk-search-help-footer\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" (click)=\\\"closeSearchHelpModal()\\\">Cancel</button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-primary\\\" (click)=\\\"confirmSelection()\\\" [disabled]=\\\"searchHelpMeta?.READ_ONLY\\\">Confirm</button>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\",\n                styles: [\".dk-search-help-header{padding:.3rem .5rem;background-color:#e9ecef}.dk-search-help-footer{padding:.5rem}.dk-search-table{display:block;overflow:scroll;max-height:40rem;white-space:nowrap;border:none}.dk-search-help-content{border:1px solid rgba(0,0,0,.4);box-shadow:8px 5px 5px rgba(0,0,0,.2)}\"]\n            }] }\n];\n/** @nocollapse */\nSearchHelpComponent.ctorParameters = () => [\n    { type: FormBuilder },\n    { type: EntityService }\n];\nif (false) {\n    /** @type {?} */\n    SearchHelpComponent.prototype.isSearchHelpModalShown;\n    /** @type {?} */\n    SearchHelpComponent.prototype.isFilterShown;\n    /** @type {?} */\n    SearchHelpComponent.prototype.isSelectAllChecked;\n    /** @type {?} */\n    SearchHelpComponent.prototype.searchHelpMeta;\n    /** @type {?} */\n    SearchHelpComponent.prototype.fuzzySearchTerm;\n    /** @type {?} */\n    SearchHelpComponent.prototype.selectedIndex;\n    /** @type {?} */\n    SearchHelpComponent.prototype.filterFields;\n    /** @type {?} */\n    SearchHelpComponent.prototype.listFields;\n    /** @type {?} */\n    SearchHelpComponent.prototype.filterFieldsFormGroup;\n    /** @type {?} */\n    SearchHelpComponent.prototype.exportControl;\n    /** @type {?} */\n    SearchHelpComponent.prototype.afterExportFn;\n    /** @type {?} */\n    SearchHelpComponent.prototype.listData;\n    /**\n     * @type {?}\n     * @private\n     */\n    SearchHelpComponent.prototype.fb;\n    /**\n     * @type {?}\n     * @private\n     */\n    SearchHelpComponent.prototype.entityService;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/attribute/attribute-base.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass AttributeBase {\n    constructor() {\n        this.dropdownList = [];\n    }\n}\nif (false) {\n    /** @type {?} */\n    AttributeBase.prototype.controlType;\n    /** @type {?} */\n    AttributeBase.prototype.key;\n    /** @type {?} */\n    AttributeBase.prototype.name;\n    /** @type {?} */\n    AttributeBase.prototype.label;\n    /** @type {?} */\n    AttributeBase.prototype.list_label;\n    /** @type {?} */\n    AttributeBase.prototype.relationId;\n    /** @type {?} */\n    AttributeBase.prototype.maxLength;\n    /** @type {?} */\n    AttributeBase.prototype.step;\n    /** @type {?} */\n    AttributeBase.prototype.domainId;\n    /** @type {?} */\n    AttributeBase.prototype.placeholder;\n    /** @type {?} */\n    AttributeBase.prototype.pattern;\n    /** @type {?} */\n    AttributeBase.prototype.domainEntityId;\n    /** @type {?} */\n    AttributeBase.prototype.domainRelationId;\n    /** @type {?} */\n    AttributeBase.prototype.searchHelpId;\n    /** @type {?} */\n    AttributeBase.prototype.searchHelpExportField;\n    /** @type {?} */\n    AttributeBase.prototype.primaryKey;\n    /** @type {?} */\n    AttributeBase.prototype.autoIncrement;\n    /** @type {?} */\n    AttributeBase.prototype.dropdownList;\n}\nclass DropdownList {\n}\nif (false) {\n    /** @type {?} */\n    DropdownList.prototype.key;\n    /** @type {?} */\n    DropdownList.prototype.value;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/attribute/attribute-validators.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// noinspection JSAnnotator\nclass DomainValueValidator {\n    /**\n     * @param {?} entityService\n     */\n    constructor(entityService) {\n        this.entityService = entityService;\n    }\n    /**\n     * @param {?} ctrl\n     * @return {?}\n     */\n    validate(ctrl) {\n        /** @type {?} */\n        const queryObject = new QueryObject();\n        // queryObject.ENTITY_ID = entityID;\n        // queryObject.RELATION_ID = relationID;\n        // queryObject.FILTER = [{FIELD_NAME: searchField, OPERATOR: 'EQ', LOW: ctrl.value}];\n        return this.entityService.searchEntities(queryObject).pipe(map((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => {\n            if (data['msgName']) {\n                return { message: data['msgName']['msgShortText'] };\n            }\n            else {\n                if (data.length === 0) {\n                    return { message: 'Value is invalid' };\n                }\n                else {\n                    return null;\n                }\n            }\n        })), catchError((/**\n         * @return {?}\n         */\n        () => null)));\n    }\n}\nDomainValueValidator.decorators = [\n    { type: Injectable, args: [{\n                providedIn: 'root'\n            },] }\n];\n/** @nocollapse */\nDomainValueValidator.ctorParameters = () => [\n    { type: EntityService }\n];\n/** @nocollapse */ DomainValueValidator.ɵprov = ɵɵdefineInjectable({ factory: function DomainValueValidator_Factory() { return new DomainValueValidator(ɵɵinject(EntityService)); }, token: DomainValueValidator, providedIn: \"root\" });\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DomainValueValidator.prototype.entityService;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/attribute/attribute-control.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass AttributeControlService {\n    /**\n     * @param {?} entityService\n     * @param {?} domainValueValidator\n     */\n    constructor(entityService, domainValueValidator) {\n        this.entityService = entityService;\n        this.domainValueValidator = domainValueValidator;\n    }\n    /**\n     * @param {?} attributes\n     * @return {?}\n     */\n    toAttributeControl(attributes) {\n        /** @type {?} */\n        const attributeControls = [];\n        if (!attributes) {\n            return attributeControls;\n        }\n        attributes.forEach((/**\n         * @param {?} attribute\n         * @return {?}\n         */\n        attribute => attributeControls.push(this.toSingleAttributeControl(attribute))));\n        return attributeControls;\n    }\n    /**\n     * @param {?} attribute\n     * @return {?}\n     */\n    toSingleAttributeControl(attribute) {\n        /** @type {?} */\n        const attributeControl = new AttributeBase();\n        attributeControl.key = attribute.ATTR_GUID;\n        attributeControl.name = attribute.ATTR_NAME;\n        attributeControl.label = attribute.LABEL_TEXT;\n        attributeControl.list_label = attribute.LIST_HEADER_TEXT;\n        attributeControl.relationId = attribute.RELATION_ID;\n        attributeControl.searchHelpId = attribute.SEARCH_HELP_ID;\n        attributeControl.searchHelpExportField = attribute.SEARCH_HELP_EXPORT_FIELD;\n        attributeControl.domainId = attribute.DOMAIN_ID;\n        attributeControl.domainEntityId = attribute.DOMAIN_ENTITY_ID;\n        attributeControl.domainRelationId = attribute.DOMAIN_RELATION_ID;\n        switch (attribute.DATA_TYPE) {\n            case 1: // Char\n                if (attribute.CAPITAL_ONLY) {\n                    attributeControl.controlType = 'text_capital';\n                    // onkeyup=\"this.value = this.value.toUpperCase();\"\n                }\n                else {\n                    if (attribute.DOMAIN_TYPE === 3) {\n                        attributeControl.controlType = 'dropdown';\n                        this._generateDropdownList(attribute.DOMAIN_ID, attributeControl);\n                    }\n                    else {\n                        attributeControl.controlType = 'text';\n                        attributeControl.pattern = attribute.REG_EXPR;\n                    }\n                }\n                attributeControl.maxLength = attribute.DATA_LENGTH;\n                attributeControl.primaryKey = attribute.PRIMARY_KEY;\n                break;\n            case 2: // Integer\n                if (attribute.DOMAIN_TYPE === 3) {\n                    attributeControl.controlType = 'dropdown';\n                    this._generateDropdownList(attribute.DOMAIN_ID, attributeControl);\n                }\n                else {\n                    attributeControl.controlType = 'integer';\n                    if (attribute.UNSIGNED) {\n                        attributeControl.pattern = '^\\\\d+([^.,])?$';\n                    }\n                    attributeControl.autoIncrement = attribute.AUTO_INCREMENT;\n                }\n                attributeControl.primaryKey = attribute.PRIMARY_KEY;\n                break;\n            case 3: // Boolean\n                attributeControl.controlType = 'checkbox';\n                break;\n            case 4: // Decimal\n                attributeControl.controlType = 'decimal';\n                this._setDecimalPattern(attributeControl, attribute);\n                break;\n            case 5: // String\n                attributeControl.controlType = 'textarea';\n                break;\n            case 6: // Binary\n                attributeControl.controlType = 'file';\n                break;\n            case 7: // Date\n                attributeControl.controlType = 'date';\n                break;\n            case 8: // Timestamp\n                attributeControl.controlType = 'timestamp';\n                break;\n            default:\n                attributeControl.controlType = 'text';\n        }\n        return attributeControl;\n    }\n    /**\n     * @param {?} domainID\n     * @param {?} attributeControl\n     * @return {?}\n     */\n    _generateDropdownList(domainID, attributeControl) {\n        this.entityService.getDataDomain(domainID)\n            .subscribe((/**\n         * @param {?} dataDomain\n         * @return {?}\n         */\n        dataDomain => dataDomain['DOMAIN_VALUES'].forEach((/**\n         * @param {?} domainValue\n         * @return {?}\n         */\n        domainValue => {\n            attributeControl.dropdownList.push({\n                key: domainValue['LOW_VALUE'],\n                value: domainValue['LOW_VALUE_TEXT'] || domainValue['LOW_VALUE']\n            });\n        }))));\n    }\n    /**\n     * @param {?} attributeControl\n     * @param {?} attribute\n     * @return {?}\n     */\n    _setDecimalPattern(attributeControl, attribute) {\n        /** @type {?} */\n        const zeroPadding = '0000000000000000000000000000000000000';\n        attributeControl.step = '0.' + zeroPadding.substr(0, attribute.DECIMAL - 1) + '1';\n        attributeControl.placeholder = '0.' + zeroPadding.substr(0, attribute.DECIMAL - 1) + '0';\n        /** @type {?} */\n        const integerPlace = attribute.DATA_LENGTH - attribute.DECIMAL;\n        attributeControl.pattern = attribute.UNSIGNED ? '^(' : '^(\\\\-?';\n        attributeControl.pattern += integerPlace ? '\\\\d{1,' + integerPlace.toString() + '})' : '0)';\n        attributeControl.pattern += '(\\\\.\\\\d{1,' + attribute.DECIMAL + '})?$';\n        attributeControl.maxLength = attribute.DATA_LENGTH;\n    }\n    /**\n     * @param {?} attribute\n     * @param {?} instance\n     * @return {?}\n     */\n    convertToFormControl(attribute, instance) {\n        /** @type {?} */\n        const formControl = new FormControl(instance[attribute.ATTR_NAME] || '');\n        if (attribute.PRIMARY_KEY && !attribute.AUTO_INCREMENT) {\n            formControl.setValidators(Validators.required);\n        }\n        // if (attribute.DOMAIN_TYPE === 2 && !attribute.PRIMARY_KEY) {\n        //   formControl.setAsyncValidators(this.domainValueValidator.validate.bind(this.domainValueValidator));\n        // }\n        return formControl;\n    }\n    /**\n     * @param {?} attributes\n     * @param {?} instance\n     * @param {?=} isDirty\n     * @return {?}\n     */\n    convertToFormGroup(attributes, instance, isDirty) {\n        /** @type {?} */\n        const group = {};\n        attributes.forEach((/**\n         * @param {?} attribute\n         * @return {?}\n         */\n        attribute => {\n            group[attribute.ATTR_NAME] = this.convertToFormControl(attribute, instance);\n            if (instance[attribute.ATTR_NAME] && isDirty) {\n                group[attribute.ATTR_NAME].markAsDirty();\n            }\n        }));\n        return new FormGroup(group);\n    }\n}\nAttributeControlService.decorators = [\n    { type: Injectable, args: [{\n                providedIn: 'root'\n            },] }\n];\n/** @nocollapse */\nAttributeControlService.ctorParameters = () => [\n    { type: EntityService },\n    { type: DomainValueValidator }\n];\n/** @nocollapse */ AttributeControlService.ɵprov = ɵɵdefineInjectable({ factory: function AttributeControlService_Factory() { return new AttributeControlService(ɵɵinject(EntityService), ɵɵinject(DomainValueValidator)); }, token: AttributeControlService, providedIn: \"root\" });\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    AttributeControlService.prototype.entityService;\n    /**\n     * @type {?}\n     * @private\n     */\n    AttributeControlService.prototype.domainValueValidator;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/attribute/attribute.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass AttributeComponent {\n    constructor() {\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        /** @type {?} */\n        const fieldCtrl = this.formGroup.get(this.attributeControl.name);\n        switch (this.attributeControl.controlType) {\n            case 'timestamp':\n                if (!this.readonly && !fieldCtrl.value) {\n                    /** @type {?} */\n                    const currentTimestamp = new Date();\n                    fieldCtrl.setValue(currentTimestamp.getFullYear() + '-' + ('0' + (currentTimestamp.getMonth() + 1)).slice(-2) + '-'\n                        + ('0' + currentTimestamp.getDate()).slice(-2) + ' ' + ('0' + currentTimestamp.getHours()).slice(-2) +\n                        ':' + ('0' + currentTimestamp.getMinutes()).slice(-2) + ':' + ('0' + currentTimestamp.getSeconds()).slice(-2));\n                    fieldCtrl.markAsDirty();\n                }\n                break;\n            case 'date':\n                if (!this.readonly && !fieldCtrl.value) {\n                    /** @type {?} */\n                    const currentDate = new Date();\n                    fieldCtrl.setValue(currentDate.getFullYear() + '-' + ('0' + (currentDate.getMonth() + 1)).slice(-2) + '-'\n                        + ('0' + currentDate.getDate()).slice(-2));\n                    fieldCtrl.markAsDirty();\n                }\n                break;\n            default:\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        if (this.attributeControl.controlType === 'dropdown' ||\n            this.attributeControl.controlType === 'checkbox') {\n            this.readonly ? this.formGroup.get(this.attributeControl.name).disable() :\n                this.formGroup.get(this.attributeControl.name).enable();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get invalid() { return this.formGroup.controls[this.attributeControl.name].invalid; }\n    /**\n     * @return {?}\n     */\n    get errorMessage() {\n        /** @type {?} */\n        const fieldCtrl = this.formGroup.get(this.attributeControl.name);\n        if (fieldCtrl.getError('pattern')) {\n            return 'The pattern is not correct';\n        }\n        else if (fieldCtrl.getError('required')) {\n            return 'Required';\n        }\n        else if (fieldCtrl.getError('message')) {\n            return fieldCtrl.getError('message');\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get isReadonly() { return this.readonly || this.attributeControl.autoIncrement; }\n    /**\n     * @param {?} attributeName\n     * @return {?}\n     */\n    onKeyup(attributeName) {\n        /** @type {?} */\n        const fieldCtrl = this.formGroup.get(attributeName);\n        fieldCtrl.setValue(fieldCtrl.value.toUpperCase());\n    }\n    /**\n     * @param {?} attributeControl\n     * @return {?}\n     */\n    onSearchHelp(attributeControl) {\n        this.searchHelpComponent.openSearchHelpModalByEntity(attributeControl.domainEntityId, attributeControl.domainRelationId, this.formGroup, this.readonly, attributeControl.name, attributeControl.domainId);\n    }\n}\nAttributeComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'dk-app-attribute',\n                template: \"<div [formGroup]=\\\"formGroup\\\">\\n  <div [ngSwitch]=\\\"attributeControl.controlType\\\">\\n    <div class=\\\"input-group\\\">\\n      <input *ngSwitchCase=\\\"'text'\\\" type=\\\"text\\\" class=\\\"form-control\\\"\\n             [class.form-control-sm] = \\\"isSmallSize\\\"\\n             [formControlName]=\\\"attributeControl.name\\\"\\n             [id]=\\\"attributeControl.key\\\"\\n             [maxlength]=\\\"attributeControl.maxLength\\\"\\n             [pattern]=\\\"attributeControl.pattern\\\"\\n             [readonly]=\\\"isReadonly\\\" >\\n      <input *ngSwitchCase=\\\"'text_capital'\\\" type=\\\"text\\\" class=\\\"form-control\\\"\\n             [class.form-control-sm] = \\\"isSmallSize\\\"\\n             [formControlName]=\\\"attributeControl.name\\\"\\n             [id]=\\\"attributeControl.key\\\"\\n             [maxlength]=\\\"attributeControl.maxLength\\\"\\n             (keyup)=\\\"onKeyup(attributeControl.name)\\\"\\n             [readonly]=\\\"isReadonly\\\" >\\n      <input *ngSwitchCase=\\\"'integer'\\\" type=\\\"number\\\" class=\\\"form-control\\\"\\n             [class.form-control-sm] = \\\"isSmallSize\\\"\\n             [formControlName]=\\\"attributeControl.name\\\"\\n             [id]=\\\"attributeControl.key\\\"\\n             [pattern]=\\\"attributeControl.pattern\\\"\\n             [readonly]=\\\"isReadonly\\\" >\\n      <div *ngIf=\\\"attributeControl.searchHelpId || attributeControl.domainRelationId\\\" class=\\\"input-group-append\\\">\\n        <button class=\\\"btn btn-outline-secondary btn-sm\\\" type=\\\"button\\\" (click)=\\\"onSearchHelp(attributeControl)\\\">\\n          <span class=\\\"fas fa-search\\\"></span>\\n        </button>\\n      </div>\\n    </div>\\n    <input *ngSwitchCase=\\\"'decimal'\\\" type=\\\"number\\\" class=\\\"form-control\\\"\\n           [class.form-control-sm] = \\\"isSmallSize\\\"\\n           [formControlName]=\\\"attributeControl.name\\\"\\n           [id]=\\\"attributeControl.key\\\"\\n           [step]=\\\"attributeControl.step\\\"\\n           [placeholder]=\\\"attributeControl.placeholder\\\"\\n           [pattern]=\\\"attributeControl.pattern\\\"\\n           [readonly]=\\\"isReadonly\\\" >\\n    <input *ngSwitchCase=\\\"'checkbox'\\\" type=\\\"checkbox\\\" class=\\\"form-control\\\"\\n           [class.form-control-sm] = \\\"isSmallSize\\\"\\n           [formControlName]=\\\"attributeControl.name\\\"\\n           [id]=\\\"attributeControl.key\\\">\\n    <input *ngSwitchCase=\\\"'textarea'\\\" type=\\\"textarea\\\" class=\\\"form-control\\\"\\n           [class.form-control-sm] = \\\"isSmallSize\\\"\\n           [formControlName]=\\\"attributeControl.name\\\"\\n           [id]=\\\"attributeControl.key\\\"\\n           [readonly]=\\\"isReadonly\\\" >\\n    <input *ngSwitchCase=\\\"'file'\\\" type=\\\"file\\\" class=\\\"form-control\\\"\\n           [class.form-control-sm] = \\\"isSmallSize\\\"\\n           [formControlName]=\\\"attributeControl.name\\\"\\n           [id]=\\\"attributeControl.key\\\"\\n           [readonly]=\\\"isReadonly\\\" >\\n    <input *ngSwitchCase=\\\"'date'\\\" type=\\\"date\\\" class=\\\"form-control\\\"\\n           [class.form-control-sm] = \\\"isSmallSize\\\"\\n           [formControlName]=\\\"attributeControl.name\\\"\\n           [id]=\\\"attributeControl.key\\\"\\n           [readonly]=\\\"isReadonly\\\" >\\n    <input *ngSwitchCase=\\\"'timestamp'\\\" type=\\\"text\\\" class=\\\"form-control\\\"\\n           [class.form-control-sm] = \\\"isSmallSize\\\"\\n           [formControlName]=\\\"attributeControl.name\\\"\\n           [id]=\\\"attributeControl.key\\\"\\n           [readonly]=\\\"isReadonly\\\" >\\n    <select *ngSwitchCase=\\\"'dropdown'\\\" class=\\\"form-control\\\"\\n            [class.form-control-sm] = \\\"isSmallSize\\\"\\n            [formControlName]=\\\"attributeControl.name\\\"\\n            [id]=\\\"attributeControl.key\\\">\\n      <option *ngFor=\\\"let opt of attributeControl.dropdownList\\\" [value]=\\\"opt.key\\\">{{opt.value}}</option>\\n    </select>\\n  </div>\\n\\n  <div *ngIf=\\\"!noErrorMsg\\\" [class.ng-invalid]=\\\"invalid\\\" class=\\\"dk-invalid-feedback\\\">\\n    {{errorMessage}}\\n  </div>\\n</div>\\n\\n<dk-app-search-help></dk-app-search-help>\\n\",\n                styles: [\"\"]\n            }] }\n];\n/** @nocollapse */\nAttributeComponent.ctorParameters = () => [];\nAttributeComponent.propDecorators = {\n    attributeControl: [{ type: Input }],\n    formGroup: [{ type: Input }],\n    readonly: [{ type: Input }],\n    isSmallSize: [{ type: Input }],\n    noErrorMsg: [{ type: Input }],\n    searchHelpComponent: [{ type: ViewChild, args: [SearchHelpComponent, { static: false },] }]\n};\nif (false) {\n    /** @type {?} */\n    AttributeComponent.prototype.attributeControl;\n    /** @type {?} */\n    AttributeComponent.prototype.formGroup;\n    /** @type {?} */\n    AttributeComponent.prototype.readonly;\n    /** @type {?} */\n    AttributeComponent.prototype.isSmallSize;\n    /** @type {?} */\n    AttributeComponent.prototype.noErrorMsg;\n    /**\n     * @type {?}\n     * @private\n     */\n    AttributeComponent.prototype.searchHelpComponent;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/attribute/attribute-form/attribute-form.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass AttributeFormComponent {\n    constructor() {\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n    }\n}\nAttributeFormComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'dk-app-attribute-form',\n                template: \"<div class=\\\"form-group row\\\" [formGroup]=\\\"formGroup\\\">\\n  <label class=\\\"col-4 col-form-label text-right\\\"\\n         [class.form-control-sm]=\\\"isSmallSize\\\"\\n         [attr.for]=\\\"attributeControl.key\\\">\\n    {{attributeControl.label}}<strong *ngIf=\\\"attributeControl.primaryKey\\\" class=\\\"primaryKey\\\">*</strong>:\\n  </label>\\n\\n  <dk-app-attribute class=\\\"col-8\\\" [attributeControl]=\\\"attributeControl\\\" [formGroup]=\\\"formGroup\\\"\\n                 [isSmallSize]=\\\"isSmallSize\\\" [readonly]=\\\"readonly\\\">\\n  </dk-app-attribute>\\n\\n</div>\\n\",\n                styles: [\"\"]\n            }] }\n];\n/** @nocollapse */\nAttributeFormComponent.ctorParameters = () => [];\nAttributeFormComponent.propDecorators = {\n    attributeControl: [{ type: Input }],\n    formGroup: [{ type: Input }],\n    readonly: [{ type: Input }],\n    isSmallSize: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    AttributeFormComponent.prototype.attributeControl;\n    /** @type {?} */\n    AttributeFormComponent.prototype.formGroup;\n    /** @type {?} */\n    AttributeFormComponent.prototype.readonly;\n    /** @type {?} */\n    AttributeFormComponent.prototype.isSmallSize;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/attribute/attribute-form2/attribute-form2.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass AttributeForm2Component {\n    constructor() {\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n    }\n    /**\n     * @return {?}\n     */\n    get invalid() { return this.formGroup.controls[this.attributeControl.name].invalid; }\n    /**\n     * @return {?}\n     */\n    get errorMessage() {\n        /** @type {?} */\n        const fieldCtrl = this.formGroup.get(this.attributeControl.name);\n        if (fieldCtrl.getError('pattern')) {\n            return 'The pattern is not correct';\n        }\n        else if (fieldCtrl.getError('required')) {\n            return 'Required';\n        }\n        else if (fieldCtrl.getError('message')) {\n            return fieldCtrl.getError('message');\n        }\n        else {\n            return null;\n        }\n    }\n}\nAttributeForm2Component.decorators = [\n    { type: Component, args: [{\n                selector: 'dk-app-attribute-form2',\n                template: \"<div class=\\\"form-group\\\" [formGroup]=\\\"formGroup\\\">\\n  <label class=\\\"col-form-label\\\"\\n         [class.form-control-sm]=\\\"isSmallSize\\\"\\n         [attr.for]=\\\"attributeControl.key\\\">\\n    {{attributeControl.label}}<strong *ngIf=\\\"attributeControl.primaryKey\\\" class=\\\"primaryKey\\\">*</strong>:\\n    <span [class.ng-invalid]=\\\"invalid\\\" class=\\\"dk-invalid-feedback\\\">{{errorMessage}}</span>\\n  </label>\\n\\n  <dk-app-attribute [attributeControl]=\\\"attributeControl\\\" [formGroup]=\\\"formGroup\\\"\\n                    [isSmallSize]=\\\"isSmallSize\\\" [readonly]=\\\"readonly\\\" [noErrorMsg]=\\\"true\\\">\\n  </dk-app-attribute>\\n\\n</div>\\n\",\n                styles: [\"\"]\n            }] }\n];\n/** @nocollapse */\nAttributeForm2Component.ctorParameters = () => [];\nAttributeForm2Component.propDecorators = {\n    attributeControl: [{ type: Input }],\n    formGroup: [{ type: Input }],\n    readonly: [{ type: Input }],\n    isSmallSize: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    AttributeForm2Component.prototype.attributeControl;\n    /** @type {?} */\n    AttributeForm2Component.prototype.formGroup;\n    /** @type {?} */\n    AttributeForm2Component.prototype.readonly;\n    /** @type {?} */\n    AttributeForm2Component.prototype.isSmallSize;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/attribute/attribute-table/attribute-table.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass AttributeTableComponent {\n    constructor() {\n        this.isDetailModalShown = false;\n        this.isErrorModalShown = false;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n    }\n    /**\n     * @return {?}\n     */\n    get displayDetailModal() { return this.isDetailModalShown ? 'block' : 'none'; }\n    /**\n     * @return {?}\n     */\n    get displayErrorModal() { return this.isErrorModalShown ? 'block' : 'none'; }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    openDetailModal(index) {\n        this.currentFormGroup = this.formArray.at(index);\n        this.isDetailModalShown = true;\n    }\n    /**\n     * @return {?}\n     */\n    closeDetailModal() {\n        if (!this.readonly && this.currentFormGroup.dirty) {\n            this.currentFormGroup.setValue(this.currentFormGroup.value); // Or the value won't be updated.\n        }\n        this.isDetailModalShown = false;\n    }\n    /**\n     * @param {?} errorTitle\n     * @param {?} errorDescription\n     * @return {?}\n     */\n    openErrorModal(errorTitle, errorDescription) {\n        this.errorTitle = errorTitle;\n        this.errorDescription = errorDescription;\n        this.isErrorModalShown = true;\n    }\n    /**\n     * @return {?}\n     */\n    closeErrorModal() {\n        this.isErrorModalShown = false;\n    }\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    deleteRelationInstance(index = 0) {\n        switch (this.entityRelation.CARDINALITY) {\n            case '[0..n]':\n                this.formArray.removeAt(index);\n                this.formArray.markAsDirty();\n                if (this.formArray.length === 0) {\n                    this.entityRelation.EMPTY = true;\n                }\n                break;\n            case '[1..n]':\n                if (this.formArray.length === 1) {\n                    this.openErrorModal('Deletion Fail', 'The relation requires at lease one entry!');\n                }\n                else {\n                    this.formArray.removeAt(index);\n                    this.formArray.markAsDirty();\n                }\n        }\n    }\n}\nAttributeTableComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'dk-app-attribute-table',\n                template: \"<table class=\\\"table table-bordered relation-table\\\"\\n       [class.table-sm]=\\\"isSmallSize\\\"\\n       [formGroup]=\\\"parentFormGroup\\\">\\n  <thead class=\\\"thead-light\\\">\\n  <tr>\\n    <th scope=\\\"col\\\">\\n      Action\\n    </th>\\n    <th scope=\\\"col\\\" *ngFor=\\\"let attributeControl of attributeControls\\\">\\n      {{attributeControl.label}}<strong *ngIf=\\\"attributeControl.primaryKey\\\" class=\\\"primaryKey\\\">*</strong>\\n    </th>\\n  </tr>\\n  </thead>\\n\\n  <tbody [formArrayName]=\\\"entityRelation.RELATION_ID\\\">\\n    <tr *ngFor=\\\"let formGroup of formArray.controls; let i = index\\\">\\n      <td class=\\\"actions\\\">\\n        <button class=\\\"btn\\\" [class.btn-sm]=\\\"isSmallSize\\\" type=\\\"button\\\" (click)=\\\"openDetailModal(i)\\\" title=\\\"Detail\\\">\\n          <span *ngIf=\\\"readonly\\\" class=\\\"fas fa-search\\\"></span>\\n          <span *ngIf=\\\"!readonly\\\" class=\\\"fas fa-pen\\\"></span>\\n        </button>\\n        <button class=\\\"btn\\\" [class.btn-sm]=\\\"isSmallSize\\\" type=\\\"button\\\" [disabled]=\\\"readonly\\\" (click)=\\\"deleteRelationInstance(i)\\\" title=\\\"Delete\\\">\\n          <span class=\\\"far fa-trash-alt\\\"></span>\\n        </button>\\n      </td>\\n      <td *ngFor=\\\"let attributeControl of attributeControls\\\">\\n        <dk-app-attribute [attributeControl]=\\\"attributeControl\\\" [isSmallSize] = \\\"isSmallSize\\\"\\n                          [formGroup]=\\\"formGroup\\\" [readonly]=\\\"readonly\\\">\\n\\n        </dk-app-attribute>\\n      </td>\\n    </tr>\\n  </tbody>\\n</table>\\n\\n<div *ngIf=\\\"currentFormGroup\\\" class=\\\"modal fade dk-modal-open\\\" [ngClass]=\\\"{'show': isDetailModalShown}\\\"\\n     [ngStyle]=\\\"{'display': displayDetailModal}\\\" id=\\\"detailModal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\">\\n  <div class=\\\"modal-dialog modal-lg\\\" role=\\\"document\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-header\\\">\\n        <h5 class=\\\"modal-title\\\" id=\\\"detail\\\">Line Detail</h5>\\n        <button type=\\\"button\\\" class=\\\"close\\\" (click)=\\\"closeDetailModal()\\\">\\n          <span aria-hidden=\\\"true\\\">&times;</span>\\n        </button>\\n      </div>\\n      <div class=\\\"modal-body\\\">\\n        <dk-app-attribute-form *ngFor=\\\"let attributeControl of attributeControls\\\"\\n                               [readonly]=\\\"readonly\\\" [isSmallSize]=\\\"isSmallSize\\\"\\n                            [attributeControl]=\\\"attributeControl\\\" [formGroup]=\\\"currentFormGroup\\\">\\n        </dk-app-attribute-form>\\n      </div>\\n      <div class=\\\"modal-footer\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" [class.btn-sm]=\\\"isSmallSize\\\" (click)=\\\"closeDetailModal()\\\">OK</button>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n<div class=\\\"modal fade\\\" [ngClass]=\\\"{'show': isErrorModalShown}\\\"\\n     [ngStyle]=\\\"{'display': displayErrorModal}\\\" id=\\\"errorModal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\">\\n  <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-header\\\">\\n        <h5 class=\\\"modal-title\\\" id=\\\"error\\\">{{errorTitle}}</h5>\\n        <button type=\\\"button\\\" class=\\\"close\\\" (click)=\\\"closeErrorModal()\\\">\\n          <span aria-hidden=\\\"true\\\">&times;</span>\\n        </button>\\n      </div>\\n      <div class=\\\"modal-body\\\">\\n        <p>{{errorDescription}}</p>\\n      </div>\\n      <div class=\\\"modal-footer\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" [class.btn-sm]=\\\"isSmallSize\\\" (click)=\\\"closeErrorModal()\\\">OK</button>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n\",\n                styles: [\".relation-table{display:block;overflow-x:auto;white-space:nowrap;border:none}.actions{width:5rem;min-width:5rem;max-width:6rem}.dk-modal-open{overflow:auto}\"]\n            }] }\n];\n/** @nocollapse */\nAttributeTableComponent.ctorParameters = () => [];\nAttributeTableComponent.propDecorators = {\n    attributeControls: [{ type: Input }],\n    formArray: [{ type: Input }],\n    parentFormGroup: [{ type: Input }],\n    entityRelation: [{ type: Input }],\n    isSmallSize: [{ type: Input }],\n    readonly: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    AttributeTableComponent.prototype.isDetailModalShown;\n    /** @type {?} */\n    AttributeTableComponent.prototype.currentFormGroup;\n    /** @type {?} */\n    AttributeTableComponent.prototype.isErrorModalShown;\n    /** @type {?} */\n    AttributeTableComponent.prototype.errorTitle;\n    /** @type {?} */\n    AttributeTableComponent.prototype.errorDescription;\n    /** @type {?} */\n    AttributeTableComponent.prototype.attributeControls;\n    /** @type {?} */\n    AttributeTableComponent.prototype.formArray;\n    /** @type {?} */\n    AttributeTableComponent.prototype.parentFormGroup;\n    /** @type {?} */\n    AttributeTableComponent.prototype.entityRelation;\n    /** @type {?} */\n    AttributeTableComponent.prototype.isSmallSize;\n    /** @type {?} */\n    AttributeTableComponent.prototype.readonly;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/jor-angular.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass JorAngularComponent {\n    constructor() {\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n    }\n}\nJorAngularComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'dk-jor-angular',\n                template: \"<!-- html content -->\\n\",\n                encapsulation: ViewEncapsulation.None,\n                styles: [\"input.ng-invalid,select.ng-invalid{border-color:#dc3545}.ng-invalid+.invalid-tooltip{display:block;max-width:inherit}.ng-invalid+.dk-invalid-feedback,.ng-invalid.dk-invalid-feedback{display:inline}.dk-invalid-feedback{display:none;width:100%;margin-top:.25rem;font-size:80%;color:#dc3545}.primaryKey{color:red}.errorMessage{color:red;font-size:.8rem}\"]\n            }] }\n];\n/** @nocollapse */\nJorAngularComponent.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/jor-angular.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass JorAngularModule {\n}\nJorAngularModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    JorAngularComponent,\n                    SearchHelpComponent,\n                    AttributeComponent,\n                    AttributeFormComponent,\n                    AttributeTableComponent,\n                    AttributeForm2Component\n                ],\n                imports: [\n                    CommonModule,\n                    HttpClientModule,\n                    FormsModule,\n                    ReactiveFormsModule\n                ],\n                exports: [\n                    JorAngularComponent,\n                    SearchHelpComponent,\n                    AttributeComponent,\n                    AttributeFormComponent,\n                    AttributeForm2Component,\n                    AttributeTableComponent\n                ]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: jor-angular.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { Association, Attribute, AttributeBase, AttributeComponent, AttributeControlService, AttributeForm2Component, AttributeFormComponent, AttributeTableComponent, DataDomainH, DataDomainMeta, DataDomainValue, DataElementH, DataElementMeta, Entity, EntityMeta, EntityRelation, EntityService, EntityType, FieldsMappingPair, Involve, JorAngularModule, PartnerInstance, PartnerRole, Projection, QueryObject, Relation, RelationMeta, Relationship, RelationshipH, RelationshipInstance, RelationshipMeta, Role, RoleH, RoleMeta, RoleRelation, SearchHelp, SearchHelpComponent, SearchHelpField, Selection, Sort, UiMapperService, DomainValueValidator as ɵa, JorAngularComponent as ɵb };\n//# sourceMappingURL=jor-angular.js.map\n","export default \"<div class=\\\"container-fluid\\\">\\n  <router-outlet></router-outlet>\\n</div>\\n\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\n\nconst routes: Routes = [\n  { path: 'entity', loadChildren: () => import('./entity/entity.module').then(m => m.EntityModule) },\n  { path: 'model', loadChildren:  () => import('./model/model.module').then( m => m.ModelModule) },\n  { path: '',   redirectTo: '/entity/list', pathMatch: 'full' }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes)\n  ],\n  exports: [ RouterModule ]\n})\nexport class AppRoutingModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","import { Component } from '@angular/core';\nimport {EntityService} from 'jor-angular';\nimport {environment} from '../environments/environment';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  constructor( private entityService: EntityService) {\n    this.entityService.setOriginalHost(environment.originalHost);\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport {HttpClientModule} from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport {RouteReuseStrategy} from '@angular/router';\nimport {CustomReuseStrategy} from './custom.reuse.strategy';\nimport {JorAngularModule} from 'jor-angular';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    HttpClientModule,\n    AppRoutingModule,\n    BrowserModule,\n    JorAngularModule\n  ],\n  providers: [\n    {provide: RouteReuseStrategy, useClass: CustomReuseStrategy}\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n\n}\n","/**\n * The custom route reuse strategy inherits the \"RouteReuseStrategy\" to achieve a very usual case,\n * which by default, Angular doesn't support.\n * 1. Search for items based on filter conditions.\n * 2. Navigate to one of the item to the detail page(component).\n * 3. Navigate back to searched item list without re-initializing the search&list component again.\n * This requires the Angular route to save the search&list component, and restore it whenever back.\n * The detail solution is described in following thread:\n * https://stackoverflow.com/questions/41280471/how-to-implement-routereusestrategy-shoulddetach-for-specific-routes-in-angular\n */\nimport {ActivatedRouteSnapshot, DetachedRouteHandle, RouteReuseStrategy} from '@angular/router';\n\nexport class CustomReuseStrategy implements RouteReuseStrategy {\n  routesToCache: string[] = ['list'];\n  storedRouteHandles = new Map<string, DetachedRouteHandle>();\n\n  /**\n   * When navigation from a reusable component, and if shouldReuseRoute return false,\n   * this method is invoked to decide whether the current route should be stored.\n   * @param route\n   */\n  shouldDetach(route: ActivatedRouteSnapshot): boolean {\n    // console.log('detaching', route);\n    return this.routesToCache.indexOf(route.routeConfig.path) > -1;\n  }\n\n  /**\n   * If the current route need to be stored, that is shouldDetach return true,\n   * then on this method, you can implement a way to store routes. Usually in a Map.\n   * @param route\n   * @param handle\n   */\n  store(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle): void {\n    // console.log('store', route);\n    this.storedRouteHandles.set(route.routeConfig.path, handle);\n  }\n\n  /**\n   * When navigation to a reusable component, and if shouldReuseRoute return false,\n   * this method is invoked to decide whether the target component can be get from a reuse buffer.\n   * @param route\n   */\n  shouldAttach(route: ActivatedRouteSnapshot): boolean {\n    // console.log('shouldAttach', route);\n    return this.storedRouteHandles.has(route.routeConfig.path);\n  }\n\n  /**\n   * If shouldAttach return true, then this method is invoke to retrieve the component from the buffer.\n   * @param route\n   */\n  retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle {\n    return this.storedRouteHandles.get(route.routeConfig.path);\n  }\n\n  /**\n   * By default, Angular doesn't re-initializing the same component if the navigation is not to\n   * a different one. For example, you switch different entity ID in the same entity type detail page.\n   * In this way, shouldReuseRoute should return true to avoid executing other methods in this Class.\n   * However, if you navigate from search&list component to entity detail component, then the method should return false.\n   * So that other methods can be executed to decide whether the search&list component should be stored for future reuse.\n   * @param future\n   * @param curr\n   */\n  shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {\n    // console.log('shouldReuseRoute, future:', future, 'current:', curr);\n    return future.routeConfig === curr.routeConfig;\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\nexport const environment = {\n  production: false,\n  originalHost: 'http://localhost:3000'\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":"webpack:///"}